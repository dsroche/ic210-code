<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:cc="http://web.resource.org/cc/" xmlns:itunes="http://www.itunes.com/dtds/podcast-1.0.dtd" xmlns:media="http://search.yahoo.com/mrss/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
	<channel>
		<atom:link href="https://corecursive.libsyn.com/feed" rel="self" type="application/rss+xml"/>
		<title>CoRecursive: Coding Stories</title>
		<pubDate>Sun, 01 Nov 2020 11:00:00 +0000</pubDate>
		<lastBuildDate>Wed, 11 Nov 2020 13:52:46 +0000</lastBuildDate>
		<generator>Libsyn WebEngine 2.0</generator>
		<link>http://corecursive.com</link>
		<language>en</language>
		<copyright><![CDATA[]]></copyright>
		<docs>http://corecursive.com</docs>
		<managingEditor>adam@corecursive.com (adam@corecursive.com)</managingEditor>
		<itunes:summary><![CDATA[The stories and people behind the code.  Hear stories of software development from interesting people.]]></itunes:summary>
		<image>
			<url>https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png</url>
			<title>CoRecursive: Coding Stories</title>
			<link><![CDATA[http://corecursive.com]]></link>
		</image>
		<itunes:author>Adam Gordon Bell - Full Stack Web Developer</itunes:author>
		<itunes:keywords>coding,softwaredevelopment</itunes:keywords>
		<itunes:category text="Technology"/>
		<itunes:category text="Education">
			<itunes:category text="How To"/>
		</itunes:category>
		<itunes:category text="News">
			<itunes:category text="Tech News"/>
		</itunes:category>
		<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
		<itunes:explicit>clean</itunes:explicit>
		<itunes:owner>
			<itunes:name><![CDATA[Adam Gordon Bell - Full Stack Web Developer]]></itunes:name>
			<itunes:email>Adam@corecursive.com</itunes:email>
		</itunes:owner>
		<description><![CDATA[The stories and people behind the code.  Hear stories of software development from interesting people.]]></description>
		<itunes:subtitle><![CDATA[]]></itunes:subtitle>
		<itunes:type>episodic</itunes:type>
		



		<item>
			<title>The Birth of Unix with Brian Kernighan</title>
			<itunes:title>The Birth of Unix with Brian Kernighan</itunes:title>
			<pubDate>Sun, 01 Nov 2020 11:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[0fa1174f-9aa8-48c1-83f7-e881ec8bcf9f]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/058-Bell_Labs.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p><span style="font-weight: 400;">As Brian</span> <span style= "font-weight: 400;">Kernighan said</span> <span style= "font-weight: 400;">“UNIX since the start has become a vehicle for creating and using programming languages.” Brian initiated work on what would become the UNIX system. He helped develop it to run on a minicomputer and would eventually be ported to other computers.</span></p> <p><span style="font-weight: 400;">In this episode, Brain will go in-depth on how the UNIX was built.</span></p> <p><span style="font-weight: 400;"><a href= "https://corecursive.com/brian-kernighan-unix-bell-labs/" target= "_blank" rel="noopener">Episode Page</a></span></p> <p><span style="font-weight: 400;"><a href= "https://corecursive.com/058-brian-kernighan-unix-bell-labs/" target="_blank" rel="noopener">Episode Transcript</a></span></p> <p><span style="font-weight: 400;">“If you wanted, you could go sit in your office and think deep thoughts or program, or write on your own blackboard or whatever, but then come back to the common space when you wanted to.“ - Brian Kernighan</span></p> <p><span style="font-weight: 400;">“I found it easier to program when I was trying to figure out the logic for myself rather than trying to figure out where in the infinite stack of documentation was the function I needed. So for me, programming is more like creating something rather than looking it up, and too much of today's programming is more like looking it up.” - Brian Kernighan</span></p> <p><span style="font-weight: 400;">“If what I find challenging or hard or whatever is also something that other people find hard or challenging or whatever, then if I do something that will improve my lot, I'm perhaps improving their lot at the same time.” - Brian Kernighan</span></p> <p><span style= "font-weight: 400;"><strong>Links:</strong></span></p> <p><a href="https://www.cs.princeton.edu/people/profile/bwk" target="_blank" rel="noopener">Brian's Homepage</a></p> <p><a href="https://www.amazon.com/dp/1695978552" target="_blank" rel="noopener">Book: Unix: A History and a Memoir</a></p> <p><a href="https://www.amazon.com/dp/0691182779/" target="_blank" rel="noopener">Book: Millions, Billions, Zillions: Defending Yourself in a World of Too Many Numbers</a></p> <p><a href="https://www.amazon.com/dp/B01M3XBS46" target="_blank" rel="noopener">Book: Understanding the Digital World: What You Need to Know about Computers, the Internet, Privacy, and Security</a></p>]]></description>
			<content:encoded><![CDATA[<p>As Brian Kernighan said “UNIX since the start has become a vehicle for creating and using programming languages.” Brian initiated work on what would become the UNIX system. He helped develop it to run on a minicomputer and would eventually be ported to other computers.</p> <p>In this episode, Brain will go in-depth on how the UNIX was built.</p> <p><a href= "https://corecursive.com/brian-kernighan-unix-bell-labs/" target= "_blank" rel="noopener">Episode Page</a></p> <p><a href= "https://corecursive.com/058-brian-kernighan-unix-bell-labs/" target="_blank" rel="noopener">Episode Transcript</a></p> <p>“If you wanted, you could go sit in your office and think deep thoughts or program, or write on your own blackboard or whatever, but then come back to the common space when you wanted to.“ - Brian Kernighan</p> <p>“I found it easier to program when I was trying to figure out the logic for myself rather than trying to figure out where in the infinite stack of documentation was the function I needed. So for me, programming is more like creating something rather than looking it up, and too much of today's programming is more like looking it up.” - Brian Kernighan</p> <p>“If what I find challenging or hard or whatever is also something that other people find hard or challenging or whatever, then if I do something that will improve my lot, I'm perhaps improving their lot at the same time.” - Brian Kernighan</p> <p>Links:</p> <p><a href="https://www.cs.princeton.edu/people/profile/bwk" target="_blank" rel="noopener">Brian's Homepage</a></p> <p><a href="https://www.amazon.com/dp/1695978552" target="_blank" rel="noopener">Book: Unix: A History and a Memoir</a></p> <p><a href="https://www.amazon.com/dp/0691182779/" target="_blank" rel="noopener">Book: Millions, Billions, Zillions: Defending Yourself in a World of Too Many Numbers</a></p> <p><a href="https://www.amazon.com/dp/B01M3XBS46" target="_blank" rel="noopener">Book: Understanding the Digital World: What You Need to Know about Computers, the Internet, Privacy, and Security</a></p>]]></content:encoded>
			<enclosure length="50521728" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/058-Bell_Labs.mp3?dest-id=628353" />
			<itunes:duration>51:10</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[As Brian Kernighan said “UNIX since the start has become a vehicle for creating and using programming languages.” Brian initiated work on what would become the UNIX system. He helped develop it to run on a minicomputer and would eventually be...]]></itunes:subtitle>
			<itunes:summary>As Brian Kernighan said “UNIX since the start has become a vehicle for creating and using programming languages.” Brian initiated work on what would become the UNIX system. He helped develop it to run on a PDP-7 and would eventually be ported to other computers.

In this episode, Brain will go in-depth on how the UNIX was built.</itunes:summary>
			<itunes:episode>58</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>To The Assembly</title>
			<itunes:title>To The Assembly</itunes:title>
			<pubDate>Thu, 01 Oct 2020 10:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[801f4a85-1a4c-47fb-8d9c-dbf0392ef553]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/057-Assembly.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p>How do CPUs work? How do compilers work? How does high-level code get translated into machine code? Today's guest is Matt Godbolt and he knows the answers to these questions.</p> <p>How he became an expert in bare metal programming is an interesting story. Matt shares his origin story and the creation of compiler explorer in today's interview.</p> <p><span style="font-weight: 400;"><a href= "https://corecursive.com/to-the-assembly/" target="_blank" rel= "noopener">Episode Page</a></span></p> <p><span style="font-weight: 400;"><a href= "https://corecursive.com/057-assembly-wth-matt-godbolt/" target= "_blank" rel="noopener">Episode Transcript</a></span></p> <p><span style= "font-weight: 400;"><strong>Links:</strong></span></p> <p><a href="godbolt.org" target="_blank" rel="noopener">Compiler Explorer</a></p> <p><a href="https://github.com/mattgodbolt" target="_blank" rel= "noopener">Matt's Github</a></p> <p><a href="https://xania.org/" target="_blank" rel= "noopener">Matt's Blog</a></p> <p><a href= "https://www.youtube.com/channel/UCC3kVzi4cWpLl16KmzsEtiQ" target= "_blank" rel="noopener">Matt's YouTube</a></p>]]></description>
			<content:encoded><![CDATA[<p>How do CPUs work? How do compilers work? How does high-level code get translated into machine code? Today's guest is Matt Godbolt and he knows the answers to these questions.</p> <p>How he became an expert in bare metal programming is an interesting story. Matt shares his origin story and the creation of compiler explorer in today's interview.</p> <p><a href= "https://corecursive.com/to-the-assembly/" target="_blank" rel= "noopener">Episode Page</a></p> <p><a href= "https://corecursive.com/057-assembly-wth-matt-godbolt/" target= "_blank" rel="noopener">Episode Transcript</a></p> <p>Links:</p> <p><a href="godbolt.org" target="_blank" rel="noopener">Compiler Explorer</a></p> <p><a href="https://github.com/mattgodbolt" target="_blank" rel= "noopener">Matt's Github</a></p> <p><a href="https://xania.org/" target="_blank" rel= "noopener">Matt's Blog</a></p> <p><a href= "https://www.youtube.com/channel/UCC3kVzi4cWpLl16KmzsEtiQ" target= "_blank" rel="noopener">Matt's YouTube</a></p>]]></content:encoded>
			<enclosure length="41073757" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/057-Assembly.mp3?dest-id=628353" />
			<itunes:duration>41:20</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[How do CPUs work? How do compilers work? How does high-level code get translated into machine code? Today's guest is Matt Godbolt and he knows the answers to these questions. How he became an expert in bare metal programming is an interesting story....]]></itunes:subtitle>
			<itunes:summary>How do CPUs work? How do compilers work? How does high-level code get translated into machine code? Today's guest is Matt Godbolt and he knows the answers to these questions.

How he became an expert in bare metal programming is an interesting story. Matt shares his origin story and the creation of compiler explorer in today's interview.</itunes:summary>
			<itunes:episode>57</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Memento Mori</title>
			<itunes:title>Memento Mori</itunes:title>
			<pubDate>Tue, 01 Sep 2020 10:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[1dd03b8c-9a57-4e0c-9415-f7d680c31480]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/056-Memento_Mori_with_Kate_Gregory.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p><span style="font-weight: 400;">Preparing our minds for the inevitable - death is pressing. After facing terminal cancer, Kate Gregory reminded herself that this event can still become inspiring by focusing on the positive.</span></p> <p><span style="font-weight: 400;">In this episode, Kate is going to share her success and explain how you would apply her 5 pieces of advice to your career as a software developer to help you to build a remarkable career for yourself.</span></p> <p><span style="font-weight: 400;"><a href= "https://corecursive.com/memento-mori-with-kate-gregory/" target= "_blank" rel="noopener">Episode Page</a></span></p> <p><span style="font-weight: 400;"><a href= "https://corecursive.com/056-memento-mori-with-kate-gregory/" target="_blank" rel="noopener">Episode Transcript</a></span></p> <p><span style= "font-weight: 400;"><strong>Links:</strong></span></p> <p><a href="http://www.gregcons.com/" target="_blank" rel= "noopener">Gregory Consulting Limited</a></p> <p><a href= "https://app.pluralsight.com/profile/author/kate-gregory" target= "_blank" rel="noopener">Kate's Classes in Pluralsight</a></p> <p><a href="https://www.includecpp.org/" target="_blank" rel= "noopener">Include CPP</a></p> <p><a href="http://www.gregcons.com/kateblog/" target="_blank" rel= "noopener">Kate's Blog</a></p> <p> </p>]]></description>
			<content:encoded><![CDATA[<p>Preparing our minds for the inevitable - death is pressing. After facing terminal cancer, Kate Gregory reminded herself that this event can still become inspiring by focusing on the positive.</p> <p>In this episode, Kate is going to share her success and explain how you would apply her 5 pieces of advice to your career as a software developer to help you to build a remarkable career for yourself.</p> <p><a href= "https://corecursive.com/memento-mori-with-kate-gregory/" target= "_blank" rel="noopener">Episode Page</a></p> <p><a href= "https://corecursive.com/056-memento-mori-with-kate-gregory/" target="_blank" rel="noopener">Episode Transcript</a></p> <p>Links:</p> <p><a href="http://www.gregcons.com/" target="_blank" rel= "noopener">Gregory Consulting Limited</a></p> <p><a href= "https://app.pluralsight.com/profile/author/kate-gregory" target= "_blank" rel="noopener">Kate's Classes in Pluralsight</a></p> <p><a href="https://www.includecpp.org/" target="_blank" rel= "noopener">Include CPP</a></p> <p><a href="http://www.gregcons.com/kateblog/" target="_blank" rel= "noopener">Kate's Blog</a></p> <p> </p>]]></content:encoded>
			<enclosure length="40332068" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/056-Memento_Mori_with_Kate_Gregory.mp3?dest-id=628353" />
			<itunes:duration>40:33</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Preparing our minds for the inevitable - death is pressing. After facing terminal cancer, Kate Gregory reminded herself that this event can still become inspiring by focusing on the positive. In this episode, Kate is going to share her success and...]]></itunes:subtitle>
			<itunes:summary>Preparing our minds for the inevitable - death is pressing. After facing terminal cancer, Kate Gregory reminded herself that this event can still become inspiring by focusing on the positive.

In this episode, Kate is going to share her success and explain how you would apply her 5 pieces of advice to your career as a software developer to help you to build a remarkable career for yourself.</itunes:summary>
			<itunes:episode>56</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>We are teaching Functional Programming Wrong</title>
			<itunes:title>We are teaching Functional Programming Wrong</itunes:title>
			<pubDate>Mon, 03 Aug 2020 10:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[ce1ae1cb-277d-47f9-abc7-cb55511588aa]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/055_-_Teaching_FP_With_Richard_Feldman.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p>Today Richard Feldman shares his story of going from javascript developer to elm developer to functional programming teacher.  Along the way, Richard finds that people are teaching functional programming wrong.  We are teaching it in a way that misses how most industrial software developers learn best.</p> <p>In this episode, Richard Feldman delves into Elm, his approach, and how to make teaching delightful.</p> <p><span style="font-weight: 400;"><a href= "https://corecursive.com/teaching-fp-with-richard-feldman/" target= "_blank" rel="noopener">Episode Page</a></span></p> <p><span style="font-weight: 400;"><a href= "https://corecursive.com/055-teaching-fp-with-richard-feldman/" target="_blank" rel="noopener">Episode Transcript</a></span></p> <p><span style= "font-weight: 400;"><strong>Links:</strong></span></p> <p><a href="https://www.manning.com/books/elm-in-action" target= "_blank" rel="noopener noreferrer"><span style= "font-weight: 400;">Book: Elm in Action</span></a></p> <p><a href="https://www.youtube.com/watch?v=zt0OQb1DBko">A Taze of ATS</a></p> <p><a href="https://elm-lang.org/">Elm Language</a></p>]]></description>
			<content:encoded><![CDATA[<p>Today Richard Feldman shares his story of going from javascript developer to elm developer to functional programming teacher.  Along the way, Richard finds that people are teaching functional programming wrong.  We are teaching it in a way that misses how most industrial software developers learn best.</p> <p>In this episode, Richard Feldman delves into Elm, his approach, and how to make teaching delightful.</p> <p><a href= "https://corecursive.com/teaching-fp-with-richard-feldman/" target= "_blank" rel="noopener">Episode Page</a></p> <p><a href= "https://corecursive.com/055-teaching-fp-with-richard-feldman/" target="_blank" rel="noopener">Episode Transcript</a></p> <p>Links:</p> <p><a href="https://www.manning.com/books/elm-in-action" target= "_blank" rel="noopener noreferrer">Book: Elm in Action</a></p> <p><a href="https://www.youtube.com/watch?v=zt0OQb1DBko">A Taze of ATS</a></p> <p><a href="https://elm-lang.org/">Elm Language</a></p>]]></content:encoded>
			<enclosure length="46197058" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/055_-_Teaching_FP_With_Richard_Feldman.mp3?dest-id=628353" />
			<itunes:duration>46:40</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Today Richard Feldman shares his story of going from javascript developer to elm developer to functional programming teacher.  Along the way, Richard finds that people are teaching functional programming wrong.  We are teaching it in a way...]]></itunes:subtitle>
			<itunes:summary>Today Richard Feldman shares his story of going from javascript developer to elm developer to functional programming teacher.  Along the way, Richard finds that people are teaching functional programming wrong.  We are teaching it in a way that misses how most industrial software developers learn best.</itunes:summary>
			<itunes:episode>55</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Software That Doesn't Suck With Jim Blandy</title>
			<itunes:title>Software That Doesn't Suck With Jim Blandy</itunes:title>
			<pubDate>Wed, 01 Jul 2020 12:41:35 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[34cd37d1-c130-4219-8b83-affa2d65a5dc]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/054-Jim_Blandy.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<h4><strong>Building Subversion</strong></h4> <p><span style="font-weight: 400;">Software is just the tool and it should get out of your way. In this episode, we will discuss Jim Blandy’s insights on how to build and recognize improvements for a great developer tool and find out how he approached the question: “What's the worst software that you use every day?”</span></p> <p><span style="font-weight: 400;">“Everybody likes imaginary code because imaginary code is always perfect.” -Jim Blandy</span></p> <p><span style="font-weight: 400;">“You don't want to maximize engagement with your version control system. You just want it to do its job and get out of the way. And so basically if somebody says, you know, this doesn't suck. That's actually pretty much exactly the right thing.” - Jim Blandy</span></p> <p><span style="font-weight: 400;">“If you're making a series of small incremental changes to a large data structure, then the way that the persistent data structures are trying really hard to share as much data as possible really works in your favor.” -Jim Blandy</span></p> <p><span style="font-weight: 400;"><a href= "https://corecursive.com/software-that-doesnt-suck-with-jim-blandy/" target="_blank" rel="noopener">Episode Page</a></span></p> <p><span style="font-weight: 400;"><a href= "https://corecursive.com/054-software-that-doesnt-suck/" target= "_blank" rel="noopener">Episode Transcript</a></span></p> <p><span style= "font-weight: 400;"><strong>Links:</strong></span></p> <ul> <li><a href="http://subversion.apache.org/" target="_blank" rel= "noopener noreferrer">Subversion</a></li> <li><a href="jimb@red-bean.com" target="_blank" rel= "noopener noreferrer">Jim's Email</a></li> <li><a href="https://www.mercurial-scm.org/wiki/" target="_blank" rel="noopener noreferrer">Mercurial </a></li> <li><a href="http://www.gnu.org/software/emacs/" target="_blank" rel="noopener noreferrer">GNU Emacs</a></li> </ul>]]></description>
			<content:encoded><![CDATA[Building Subversion <p>Software is just the tool and it should get out of your way. In this episode, we will discuss Jim Blandy’s insights on how to build and recognize improvements for a great developer tool and find out how he approached the question: “What's the worst software that you use every day?”</p> <p>“Everybody likes imaginary code because imaginary code is always perfect.” -Jim Blandy</p> <p>“You don't want to maximize engagement with your version control system. You just want it to do its job and get out of the way. And so basically if somebody says, you know, this doesn't suck. That's actually pretty much exactly the right thing.” - Jim Blandy</p> <p>“If you're making a series of small incremental changes to a large data structure, then the way that the persistent data structures are trying really hard to share as much data as possible really works in your favor.” -Jim Blandy</p> <p><a href= "https://corecursive.com/software-that-doesnt-suck-with-jim-blandy/" target="_blank" rel="noopener">Episode Page</a></p> <p><a href= "https://corecursive.com/054-software-that-doesnt-suck/" target= "_blank" rel="noopener">Episode Transcript</a></p> <p>Links:</p> <ul> <li><a href="http://subversion.apache.org/" target="_blank" rel= "noopener noreferrer">Subversion</a></li> <li><a href="jimb@red-bean.com" target="_blank" rel= "noopener noreferrer">Jim's Email</a></li> <li><a href="https://www.mercurial-scm.org/wiki/" target="_blank" rel="noopener noreferrer">Mercurial </a></li> <li><a href="http://www.gnu.org/software/emacs/" target="_blank" rel="noopener noreferrer">GNU Emacs</a></li> </ul>]]></content:encoded>
			<enclosure length="37194176" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/054-Jim_Blandy.mp3?dest-id=628353" />
			<itunes:duration>37:17</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Building Subversion Software is just the tool and it should get out of your way. In this episode, we will discuss Jim Blandy’s insights on how to build and recognize improvements for a great developer tool and find out how he approached the...]]></itunes:subtitle>
			<itunes:summary>Software is just the tool and it should get out of your way. In this episode, we will discuss Jim Blandy’s insights on how to build and recognize improvements for a great developer tool and find out how he approached the question: “What's the worst software that you use every day?”</itunes:summary>
			<itunes:episode>54</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Unproven Tech Case Study with Sean Allen</title>
			<itunes:title>Unproven Tech Case Study with Sean Allen</itunes:title>
			<pubDate>Wed, 10 Jun 2020 10:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[d5d8a172-1d29-43ac-9b9a-266c28f5c8d2]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/053-Unproven.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<h4><strong>Choosing The Right Tool For the Job</strong></h4> <p><span style="font-weight: 400;">Choosing the right programming language or framework for a project can be key to the success of the project.</span></p> <p>In today’s episode, Sean Allen Sean shares a story of picking the right tool for a job. The tool he ends up picking will surprise you.</p> <p>His problem: make a distributed stream processing framework, something that can take a fire hose of events and perform customer’s specific calculations on them but the latency needs to be less than a millisecond and the calculations might be CPU intensive. Who would need something like this? The initial use case was risk systems for Wall Street banks. </p> <p><span style="font-weight: 400;">“Basically programming languages are tools. It's not about ergonomics, it's not about developer experience, it's not about all the things that we normally talk about, it's about getting the job right. For whatever that means it's a means to an end.” - Sean Allen</span></p> <p><span style="font-weight: 400;"><a href= "https://corecursive.com/055-unproven-with-sean-allen-1" target= "_blank" rel="noopener">Episode Page</a></span></p> <p><span style="font-weight: 400;"><a href= "https://corecursive.com/055-unproven-with-sean-allen/" target= "_blank" rel="noopener noreferrer">Episode Transcript</a></span></p> <p><strong>Links:</strong></p> <ul> <li><a href="https://www.youtube.com/watch?v=tM4YskS94b0" target= "_blank" rel="noopener noreferrer">Martin Thompson - Low Latency JVM</a></li> <li><a href="https://github.com/basho/riak" target="_blank" rel= "noopener noreferrer">Basho - Riak</a></li> <li><a href= "https://stackoverflow.com/questions/7717691/why-is-the-minimalist-example-haskell-quicksort-not-a-true-quicksort" target="_blank" rel="noopener noreferrer">Haskell Quicksort</a></li> <li><a href="https://www.youtube.com/watch?v=GigBhej1gfI" target= "_blank" rel="noopener noreferrer">Pony Talk</a></li> <li><a href="https://www.ponylang.io/">Pony Lang</a></li> </ul>]]></description>
			<content:encoded><![CDATA[Choosing The Right Tool For the Job <p>Choosing the right programming language or framework for a project can be key to the success of the project.</p> <p>In today’s episode, Sean Allen Sean shares a story of picking the right tool for a job. The tool he ends up picking will surprise you.</p> <p>His problem: make a distributed stream processing framework, something that can take a fire hose of events and perform customer’s specific calculations on them but the latency needs to be less than a millisecond and the calculations might be CPU intensive. Who would need something like this? The initial use case was risk systems for Wall Street banks. </p> <p>“Basically programming languages are tools. It's not about ergonomics, it's not about developer experience, it's not about all the things that we normally talk about, it's about getting the job right. For whatever that means it's a means to an end.” - Sean Allen</p> <p><a href= "https://corecursive.com/055-unproven-with-sean-allen-1" target= "_blank" rel="noopener">Episode Page</a></p> <p><a href= "https://corecursive.com/055-unproven-with-sean-allen/" target= "_blank" rel="noopener noreferrer">Episode Transcript</a></p> <p>Links:</p> <ul> <li><a href="https://www.youtube.com/watch?v=tM4YskS94b0" target= "_blank" rel="noopener noreferrer">Martin Thompson - Low Latency JVM</a></li> <li><a href="https://github.com/basho/riak" target="_blank" rel= "noopener noreferrer">Basho - Riak</a></li> <li><a href= "https://stackoverflow.com/questions/7717691/why-is-the-minimalist-example-haskell-quicksort-not-a-true-quicksort" target="_blank" rel="noopener noreferrer">Haskell Quicksort</a></li> <li><a href="https://www.youtube.com/watch?v=GigBhej1gfI" target= "_blank" rel="noopener noreferrer">Pony Talk</a></li> <li><a href="https://www.ponylang.io/">Pony Lang</a></li> </ul>]]></content:encoded>
			<enclosure length="38885322" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/053-Unproven.mp3?dest-id=628353" />
			<itunes:duration>39:03</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Choosing The Right Tool For the Job Choosing the right programming language or framework for a project can be key to the success of the project. In today’s episode, Sean Allen Sean shares a story of picking the right tool for a job. The tool he ends...]]></itunes:subtitle>
			<itunes:summary>Choosing the programming language or framework for a project can be key to the success of the project.

In today’s episode, Sean Allen shared their success in finding an unproven language and how they picked this as the most appropriate tool to do the job for them.</itunes:summary>
			<itunes:episode>53</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Krystal's Story</title>
			<itunes:title>Krystal's Story</itunes:title>
			<pubDate>Mon, 18 May 2020 10:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[d519bf82-16fd-480f-a141-d96deb9d75a1]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/052-Krystal_Maughan.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p><strong>Chasing Your Curiosity and Continuous Learning</strong></p> <p>Things are easier to learn when you are passionate about something. A lot of great careers are built on curiosity and obsession including Krystal Maughan our guest for today's episode.</p> <p>Krystal will share her journey as she chased her curiosity in programming wherever it led her.</p> <p>"Everybody has that moment when everything's shiny, you know when it's new and you walk on to campus like Google or whatever.<br /> Like the first time, I went to Google IO and I just thought it was like, this is insane."</p> <p>"If you like to learn things, I think that's a gift. I think that's not something that everybody has." </p> <p>"I think that seeing programming in different ways and seeing that it could be this kind of fun thing that you could break apart and find different ways of executing." </p> <p><a href="https://corecursive.com/052-krystals-story1/" target= "_blank" rel="noopener">Episode Page</a></p> <p><a href="https://corecursive.com/052-krystals-story/" target= "_blank" rel="noopener">Episode Transcript</a></p> <p><strong>Links</strong>:</p> <ul> <li style="font-weight: 400;"> <p><a href="https://kammitama5.github.io/" target="_blank" rel= "noopener noreferrer"><span style= "text-decoration: underline;">Krystal's Blog</span></a></p> </li> <li style="font-weight: 400;"> <p><a href= "https://medium.com/@krystal.maughan/breaking-the-space-time-barrier-with-haskell-time-traveling-and-debugging-in-codeworld-a-google-e87894dd43d7" target="_blank" rel="noopener noreferrer"><span style= "text-decoration: underline;">Her GSOC Project</span></a></p> </li> <li style="font-weight: 400;"> <p><a href= "https://medium.com/caribbeantechies/4-questions-with-krystal-a-maughan-2fa2ed9ab9fe" target="_blank" rel="noopener noreferrer">Interview with Krystal</a></p> </li> <li style="font-weight: 400;"> <p><a href="https://kammitama5.github.io/Sunday-May-3rd/" target= "_blank" rel="noopener noreferrer">Full Timeline of Krystal's Journey</a></p> </li> </ul>]]></description>
			<content:encoded><![CDATA[<p>Chasing Your Curiosity and Continuous Learning</p> <p>Things are easier to learn when you are passionate about something. A lot of great careers are built on curiosity and obsession including Krystal Maughan our guest for today's episode.</p> <p>Krystal will share her journey as she chased her curiosity in programming wherever it led her.</p> <p>"Everybody has that moment when everything's shiny, you know when it's new and you walk on to campus like Google or whatever. Like the first time, I went to Google IO and I just thought it was like, this is insane."</p> <p>"If you like to learn things, I think that's a gift. I think that's not something that everybody has." </p> <p>"I think that seeing programming in different ways and seeing that it could be this kind of fun thing that you could break apart and find different ways of executing." </p> <p><a href="https://corecursive.com/052-krystals-story1/" target= "_blank" rel="noopener">Episode Page</a></p> <p><a href="https://corecursive.com/052-krystals-story/" target= "_blank" rel="noopener">Episode Transcript</a></p> <p>Links:</p> <ul> <li style="font-weight: 400;"> <p><a href="https://kammitama5.github.io/" target="_blank" rel= "noopener noreferrer">Krystal's Blog</a></p> </li> <li style="font-weight: 400;"> <p><a href= "https://medium.com/@krystal.maughan/breaking-the-space-time-barrier-with-haskell-time-traveling-and-debugging-in-codeworld-a-google-e87894dd43d7" target="_blank" rel="noopener noreferrer">Her GSOC Project</a></p> </li> <li style="font-weight: 400;"> <p><a href= "https://medium.com/caribbeantechies/4-questions-with-krystal-a-maughan-2fa2ed9ab9fe" target="_blank" rel="noopener noreferrer">Interview with Krystal</a></p> </li> <li style="font-weight: 400;"> <p><a href="https://kammitama5.github.io/Sunday-May-3rd/" target= "_blank" rel="noopener noreferrer">Full Timeline of Krystal's Journey</a></p> </li> </ul>]]></content:encoded>
			<enclosure length="40120222" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/052-Krystal_Maughan.mp3?dest-id=628353" />
			<itunes:duration>40:20</itunes:duration>
			<itunes:explicit>yes</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Chasing Your Curiosity and Continuous Learning Things are easier to learn when you are passionate about something. A lot of great careers are built on curiosity and obsession including Krystal Maughan our guest for today's episode. Krystal will share...]]></itunes:subtitle>
			<itunes:summary>Things are easy when you are passionate about something, a lot of great careers are built on curiosity and obsession including Krystal Maughan our guest for today's episode.

Krystal will share her journey as she chased her curiosity in programming and where it led her -- even if it means putting everything at risk.</itunes:summary>
			<itunes:episode>52</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Learning a new language with Bruce Tate</title>
			<itunes:title>Bruce Tate on Language Learning</itunes:title>
			<pubDate>Wed, 06 May 2020 10:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[e690f403-bc19-4c7f-9fee-57dc6000854c]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/051_Bruce_Tate_on_Language_Learning.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p><span style="font-weight: 400;">There’s joy that can be found in language learning and pain as well. Whether you’re a beginner or an expert, there are still some things you can only discover by picking up a new language. </span></p> <p><span style="font-weight: 400;">Bruce Tate will tell us how learning new languages rekindled the spark of joy for him.</span></p> <p><em><span style="font-weight: 400;">“</span></em><span style= "font-weight: 400;">I find that learning a new language mixes a lot of joy in that pain, and that's when I grow most rapidly as a developer.”</span></p> <p><span style="font-weight: 400;">“You can't break somebody else through their own pain. They have to learn their own lessons, and they have to, at some point in the model, they have to feel more and more pain to break through to the expert.”</span></p> <p><span style="font-weight: 400;">“</span><span style= "font-weight: 400;">When you visit other places, when you learn other languages, the world gets smaller.”</span></p> <p><a href= "https://corecursive.com/051-bruce-tate-language-learning2" target= "_blank" rel="noopener">Episode Page</a></p> <p><a href= "https://corecursive.com/051-bruce-tate-language-learning/" target= "_blank" rel="noopener">Episode Transcript</a></p> <p><strong>Links</strong>:</p> <ul> <li style="font-weight: 400;"><a href= "https://www.amazon.com/Seven-Languages-Weeks-Programming-Programmers-ebook/dp/B00AYQNR46/ref=sr_1_1?crid=2C3PVCEM6IW1I&dchild=1&keywords=seven+languages+in+seven+weeks&qid=1585511803&s=books&sprefix=seven+language%2Cstripbooks-intl-ship%2C213&sr=1-1"> <span style="font-weight: 400;">7 Languages in 7 Weeks Book</span></a></li> <li style="font-weight: 400;"><a href= "https://www.amazon.com/Seven-More-Languages-Weeks-Shaping-ebook/dp/B00RW8XFUK/ref=sr_1_7?dchild=1&qid=1585511762&refinements=p_27%3ABruce+A.+Tate&s=books&sr=1-7&text=Bruce+A.+Tate"> <span style="font-weight: 400;">7 More Languages</span></a></li> <li style="font-weight: 400;"><a href= "https://www.youtube.com/watch?v=rDLq9hFRWBw"><span style= "font-weight: 400;">Joy Talk</span></a></li> </ul> <p> </p>]]></description>
			<content:encoded><![CDATA[<p>There’s joy that can be found in language learning and pain as well. Whether you’re a beginner or an expert, there are still some things you can only discover by picking up a new language. </p> <p>Bruce Tate will tell us how learning new languages rekindled the spark of joy for him.</p> <p><em>“</em>I find that learning a new language mixes a lot of joy in that pain, and that's when I grow most rapidly as a developer.”</p> <p>“You can't break somebody else through their own pain. They have to learn their own lessons, and they have to, at some point in the model, they have to feel more and more pain to break through to the expert.”</p> <p>“When you visit other places, when you learn other languages, the world gets smaller.”</p> <p><a href= "https://corecursive.com/051-bruce-tate-language-learning2" target= "_blank" rel="noopener">Episode Page</a></p> <p><a href= "https://corecursive.com/051-bruce-tate-language-learning/" target= "_blank" rel="noopener">Episode Transcript</a></p> <p>Links:</p> <ul> <li style="font-weight: 400;"><a href= "https://www.amazon.com/Seven-Languages-Weeks-Programming-Programmers-ebook/dp/B00AYQNR46/ref=sr_1_1?crid=2C3PVCEM6IW1I&dchild=1&keywords=seven+languages+in+seven+weeks&qid=1585511803&s=books&sprefix=seven+language%2Cstripbooks-intl-ship%2C213&sr=1-1"> 7 Languages in 7 Weeks Book</a></li> <li style="font-weight: 400;"><a href= "https://www.amazon.com/Seven-More-Languages-Weeks-Shaping-ebook/dp/B00RW8XFUK/ref=sr_1_7?dchild=1&qid=1585511762&refinements=p_27%3ABruce+A.+Tate&s=books&sr=1-7&text=Bruce+A.+Tate"> 7 More Languages</a></li> <li style="font-weight: 400;"><a href= "https://www.youtube.com/watch?v=rDLq9hFRWBw">Joy Talk</a></li> </ul> <p> </p>]]></content:encoded>
			<enclosure length="35598969" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/051_Bruce_Tate_on_Language_Learning.mp3?dest-id=628353" />
			<itunes:duration>35:38</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[There’s joy that can be found in language learning and pain as well. Whether you’re a beginner or an expert, there are still some things you can only discover by picking up a new language.  Bruce Tate will tell us how learning new languages...]]></itunes:subtitle>
			<itunes:summary>There’s joy that can be found in language learning and pain as well. Whether you’re a beginner or an expert, there are still some things you can only discover by picking up a new language. 

Bruce Tate will tell us how learning new languages rekindled the spark of joy for him.</itunes:summary>
			<itunes:episode>51</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Portal Abstractions with Sam Ritchie</title>
			<itunes:title>Sam Ritchie on Portal Abstractions</itunes:title>
			<pubDate>Fri, 17 Apr 2020 09:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[05c32237-7b90-4955-ae90-85807978c505]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/50_Portal_Abstractions.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p>Buckle up, on today’s episode Adam interviews Sam about how the abstract algebra and probabilistic data structures helped solve fast versus big data issues that many are struggling with. Sam Ritchie is a machine learning researcher and a mechanical engineer by training.</p> <p>Stop in to hear Adam and Sam’s conversation about portal abstractions that let you leverage work from other fields. You cannot miss this episode!</p> <p>"And that's really all we want to do. Like, we want things where you can pause and wait a while and then load it back out and keep going." - Sam Ritchie</p> <p>"I'm aiming to implement these interfaces and pass these tests and then being able to immediately turn around and have like an approximate sliding window counter that would just work with stripes, like entire machine learning feature generation interface." - Sam Ritchie</p> <p>"I'm really passionate about and the reason this stuff's important is. You want to go mine the literature of what other people have done. You know you want to go be able to plug these things into your work and really just benefit from this incredible community that's been cranking for, you know, again, maybe hundreds of years." - Sam Ritchie</p> <p><a href= "https://corecursive.com/050-sam-ritchie-portal-abstractions-2" target="_blank" rel="noopener">Episode Page</a></p> <p><a href= "https://corecursive.com/050-sam-ritchie-portal-abstractions/" target="_blank" rel="noopener">Episode Transcript</a></p> <p><strong>Links</strong>:</p> <p><a href="https://samritchie.io/" target="_blank" rel= "noopener">Sam's Blog</a></p> <p><a href="https://github.com/twitter/summingbird">Summing Bird</a></p> <p><a href="https://github.com/twitter/algebird">Algebird</a></p> <p><a href="https://www.scalarl.com/course.html" target="_blank" rel="noopener">Reinforcement Learning</a></p>]]></description>
			<content:encoded><![CDATA[<p>Buckle up, on today’s episode Adam interviews Sam about how the abstract algebra and probabilistic data structures helped solve fast versus big data issues that many are struggling with. Sam Ritchie is a machine learning researcher and a mechanical engineer by training.</p> <p>Stop in to hear Adam and Sam’s conversation about portal abstractions that let you leverage work from other fields. You cannot miss this episode!</p> <p>"And that's really all we want to do. Like, we want things where you can pause and wait a while and then load it back out and keep going." - Sam Ritchie</p> <p>"I'm aiming to implement these interfaces and pass these tests and then being able to immediately turn around and have like an approximate sliding window counter that would just work with stripes, like entire machine learning feature generation interface." - Sam Ritchie</p> <p>"I'm really passionate about and the reason this stuff's important is. You want to go mine the literature of what other people have done. You know you want to go be able to plug these things into your work and really just benefit from this incredible community that's been cranking for, you know, again, maybe hundreds of years." - Sam Ritchie</p> <p><a href= "https://corecursive.com/050-sam-ritchie-portal-abstractions-2" target="_blank" rel="noopener">Episode Page</a></p> <p><a href= "https://corecursive.com/050-sam-ritchie-portal-abstractions/" target="_blank" rel="noopener">Episode Transcript</a></p> <p>Links:</p> <p><a href="https://samritchie.io/" target="_blank" rel= "noopener">Sam's Blog</a></p> <p><a href="https://github.com/twitter/summingbird">Summing Bird</a></p> <p><a href="https://github.com/twitter/algebird">Algebird</a></p> <p><a href="https://www.scalarl.com/course.html" target="_blank" rel="noopener">Reinforcement Learning</a></p>]]></content:encoded>
			<enclosure length="35177606" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/50_Portal_Abstractions.mp3?dest-id=628353" />
			<itunes:duration>35:11</itunes:duration>
			<itunes:explicit>yes</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Buckle up, on today’s episode Adam interviews Sam about how the abstract algebra and probabilistic data structures helped solve fast versus big data issues that many are struggling with. Sam Ritchie is a machine learning researcher and a...]]></itunes:subtitle>
			<itunes:summary>Buckle up, on today’s episode Adam interviews Sam about how the abstract algebra and probabilistic data structures helped solve fast versus big data issues that many are struggling with. 

Stop in to hear Adam and Sam’s conversation about portal abstractions that let you leverage work from other fields. You cannot miss this episode!</itunes:summary>
			<itunes:episode>50</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Loving Legacy Code with Jonathan Boccara</title>
			<itunes:title>Loving Legacy Code with Jonathan Boccara</itunes:title>
			<pubDate>Fri, 03 Apr 2020 09:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[05b343f8-d372-410f-9eff-62daa3b74b5a]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/049_-_Loving_Legacy_Code.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p>Legacy code is everywhere. I don't think I've met anyone who doesn't have to deal with legacy code in the substantial portion of his work.</p> <p>Our guest, Jonathan Boccara is a French C++ developer and the author of The Legacy Code Programmer's Toolbox. In this episode, Jonathan will help us understand and build the correct mindset to effectively work with legacy code by using his approach and processes.</p> <p>"An important message I'm trying to get across is that you should not complain if you don't, in turn, intend to improve the code." - Jonathan Boccara</p> <p>"That would be any critique that's technical. One thing that comes up very often is levels of obstruction. If I had to sum up best practices in, in three words, that would be those levels of obstruction." - Jonathan Boccara</p> <p>"The point of code is to make a piece of software run and to make it run in a way that will make customers happy. " - Jonathan Boccara</p> <p><a href= "https://corecursive.com/loving-legacy-code-with-jonathan-boccara/"> Episode Page</a></p> <p><a href= "https://corecursive.com/jonathan-boccara-loving-legacy-code-transcript/"> Episode Transcript</a></p> <p><strong>Links</strong>:</p> <ul> <li><a href="https://www.fluentcpp.com/" target="_blank" rel= "noopener">Fluent C++</a></li> <li><a href= "https://www.se-radio.net/2019/04/363-jonathan-boccara-on-understanding-legacy-code/" target="_blank" rel="noopener">SE Radio: Understanding Legacy Code</a></li> <li><a href="http://www.fluentcpp.com/word-count/" target="_blank" rel="noopener noreferrer">Counting words in your code</a></li> </ul> <p> </p>]]></description>
			<content:encoded><![CDATA[<p>Legacy code is everywhere. I don't think I've met anyone who doesn't have to deal with legacy code in the substantial portion of his work.</p> <p>Our guest, Jonathan Boccara is a French C++ developer and the author of The Legacy Code Programmer's Toolbox. In this episode, Jonathan will help us understand and build the correct mindset to effectively work with legacy code by using his approach and processes.</p> <p>"An important message I'm trying to get across is that you should not complain if you don't, in turn, intend to improve the code." - Jonathan Boccara</p> <p>"That would be any critique that's technical. One thing that comes up very often is levels of obstruction. If I had to sum up best practices in, in three words, that would be those levels of obstruction." - Jonathan Boccara</p> <p>"The point of code is to make a piece of software run and to make it run in a way that will make customers happy. " - Jonathan Boccara</p> <p><a href= "https://corecursive.com/loving-legacy-code-with-jonathan-boccara/"> Episode Page</a></p> <p><a href= "https://corecursive.com/jonathan-boccara-loving-legacy-code-transcript/"> Episode Transcript</a></p> <p>Links:</p> <ul> <li><a href="https://www.fluentcpp.com/" target="_blank" rel= "noopener">Fluent C++</a></li> <li><a href= "https://www.se-radio.net/2019/04/363-jonathan-boccara-on-understanding-legacy-code/" target="_blank" rel="noopener">SE Radio: Understanding Legacy Code</a></li> <li><a href="http://www.fluentcpp.com/word-count/" target="_blank" rel="noopener noreferrer">Counting words in your code</a></li> </ul> <p> </p>]]></content:encoded>
			<enclosure length="25259017" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/049_-_Loving_Legacy_Code.mp3?dest-id=628353" />
			<itunes:duration>24:51</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Legacy code is everywhere. I don't think I've met anyone who doesn't have to deal with legacy code in the substantial portion of his work. Our guest, Jonathan Boccara is a French C++ developer and the author of The Legacy Code Programmer's Toolbox. In...]]></itunes:subtitle>
			<itunes:summary>Legacy code is everywhere. I don't think I've met anyone who doesn't have to deal with legacy code in the substantial portion of his work.

Our guest, Jonathan Boccara is a French C++ developer and the author of The Legacy Code Programmer's Toolbox. In this episode, Jonathan will help us understand and build the correct mindset to effectively work with legacy code by using his approach and processes.
</itunes:summary>
			<itunes:episode>49</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>The Reason For Types with Jared Forsyth on ReasonML and Javascript</title>
			<itunes:title>The Reason For Types with Jared Forsyth on ReasonML and Javascript</itunes:title>
			<pubDate>Mon, 16 Mar 2020 10:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[15dd0270-6134-4bc7-ae72-c4eb92930254]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/048_-_ReasonML.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p>Adam talked to Jared Forsyth about his journey from untyped javascript to using flow and eventually reasonml.</p> <p><a href="http://go.thoughtleaders.io/1758920200325">Click here to see if you are eligible for a the Springboard scholarship from our sponsor</a></p> <p>"I mean, I was, I'll admit it I was definitely in the: 'I was scarred by Java and C plus plus in an intro to programming class and I never want to look at types again' Camp"</p> <p>"My first language was Python and followed closely by Javascript. And so I was, I was loving the loosey goosey scripting language. My first experience of using types in JavaScript, I was like is this going to be terrible? Because there's so much overhead in Java and C plus, plus you have to write types for literally everything."</p> <p><strong>Links:</strong></p> <ul> <li><a href="http://go.thoughtleaders.io/1758920200325">Springboard Scholarship</a></li> <li><a style= "font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;" href="https://anchor.fm/reason-town">Reason Town Podcast</a></li> <li><a style= "font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;" href="https://reasonml.github.io/">ReasonML</a></li> <li><a style= "font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;" href= "https://jaredforsyth.com/reason-javascript-flavored-ocaml/">Jared's Talk on ReasonML</a></li> <li><a style= "font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;" href="https://www.youtube.com/watch?v=RV997YRIMZs">React with Reason Talk</a></li> <li><a style= "font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;" href="https://jaredforsyth.com/type-systems-js-dev/#/2">Types in Javascript</a></li> </ul>]]></description>
			<content:encoded><![CDATA[<p>Adam talked to Jared Forsyth about his journey from untyped javascript to using flow and eventually reasonml.</p> <p><a href="http://go.thoughtleaders.io/1758920200325">Click here to see if you are eligible for a the Springboard scholarship from our sponsor</a></p> <p>"I mean, I was, I'll admit it I was definitely in the: 'I was scarred by Java and C plus plus in an intro to programming class and I never want to look at types again' Camp"</p> <p>"My first language was Python and followed closely by Javascript. And so I was, I was loving the loosey goosey scripting language. My first experience of using types in JavaScript, I was like is this going to be terrible? Because there's so much overhead in Java and C plus, plus you have to write types for literally everything."</p> <p>Links:</p> <ul> <li><a href="http://go.thoughtleaders.io/1758920200325">Springboard Scholarship</a></li> <li><a style= "font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;" href="https://anchor.fm/reason-town">Reason Town Podcast</a></li> <li><a style= "font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;" href="https://reasonml.github.io/">ReasonML</a></li> <li><a style= "font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;" href= "https://jaredforsyth.com/reason-javascript-flavored-ocaml/">Jared's Talk on ReasonML</a></li> <li><a style= "font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;" href="https://www.youtube.com/watch?v=RV997YRIMZs">React with Reason Talk</a></li> <li><a style= "font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;" href="https://jaredforsyth.com/type-systems-js-dev/#/2">Types in Javascript</a></li> </ul>]]></content:encoded>
			<enclosure length="36536768" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/048_-_ReasonML.mp3?dest-id=628353" />
			<itunes:duration>36:36</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Adam talked to Jared Forsyth about his journey from untyped javascript to using flow and eventually reasonml.  "I mean, I was, I'll admit it I was definitely in the: 'I was scarred by Java and C plus plus in an intro to programming class and I never...]]></itunes:subtitle>
			<itunes:summary>Adam talked to Jared Forsyth about his journey from untyped javascript to using flow and eventually reasonml.

"I mean, I was, I'll admit it I was definitely in the: 'I was scarred by Java and C plus plus in an intro to programming class and I never want to look at types again' Camp"
</itunes:summary>
			<itunes:episode>48</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Karl L Hughes on  Speaking and Conference Talks</title>
			<itunes:title>Karl L Hughes on  Speaking and Conference Talks</itunes:title>
			<pubDate>Mon, 02 Mar 2020 10:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[428c3d23-a8be-4baf-9139-37bf21be038d]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/047_-_Conference_Talks.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/a/8/f/1/a8f1f7e31a1da1fd/047_-_Conference_Talks.jpg" />
			<description><![CDATA[<p>Adam talks to Karl Hughes about his path to becoming a conference speaker and the work he has done to make it easier for others to follow in his footsteps.</p> <p>"I didn't start trying to speak at conferences until I was at least seven or eight years into my software development career. So. Just a couple of years ago and before that, I think what helped build confidence was speaking occasionally at meetups. I started talking occasionally at local code bootcamps, just kind of getting to be in front of a crowd and start to build up some like level of self-assuredness and eventually I think the next step was just obvious. I wanted to push myself to do something a little scarier and bigger, and that was like, get in front of people at a real conference. "</p> <p>"And so it is scary. Partly also it's that, you know, because it was my first time, I didn't really know what to expect. I had only been to a couple of tech conferences before. I didn't know what the audiences were going to be like. If there was kind of be this like big tomato throwing thing at the end, they're all just bashed me or if it was going to be like a more of a friendly conversation."</p> <p><strong>Show notes:</strong></p> <ul> <li><a href="https://www.cfpland.com/">CFP Land</a></li> <li><a href="https://www.karllhughes.com/">Karl's Personal Site</a></li> <li><a href="https://www.youtube.com/watch?v=Aw5B8XDQLT8">Washing Machine Guy Talk</a></li> <li><a href= "https://corecursive.com/047-karl-l-hughes-conference-talks/">episode webpage</a></li> </ul>]]></description>
			<content:encoded><![CDATA[<p>Adam talks to Karl Hughes about his path to becoming a conference speaker and the work he has done to make it easier for others to follow in his footsteps.</p> <p>"I didn't start trying to speak at conferences until I was at least seven or eight years into my software development career. So. Just a couple of years ago and before that, I think what helped build confidence was speaking occasionally at meetups. I started talking occasionally at local code bootcamps, just kind of getting to be in front of a crowd and start to build up some like level of self-assuredness and eventually I think the next step was just obvious. I wanted to push myself to do something a little scarier and bigger, and that was like, get in front of people at a real conference. "</p> <p>"And so it is scary. Partly also it's that, you know, because it was my first time, I didn't really know what to expect. I had only been to a couple of tech conferences before. I didn't know what the audiences were going to be like. If there was kind of be this like big tomato throwing thing at the end, they're all just bashed me or if it was going to be like a more of a friendly conversation."</p> <p>Show notes:</p> <ul> <li><a href="https://www.cfpland.com/">CFP Land</a></li> <li><a href="https://www.karllhughes.com/">Karl's Personal Site</a></li> <li><a href="https://www.youtube.com/watch?v=Aw5B8XDQLT8">Washing Machine Guy Talk</a></li> <li><a href= "https://corecursive.com/047-karl-l-hughes-conference-talks/">episode webpage</a></li> </ul>]]></content:encoded>
			<enclosure length="48494549" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/047_-_Conference_Talks.mp3?dest-id=628353" />
			<itunes:duration>50:31</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Adam talks to Karl Hughes about his path to becoming a conference speaker and the work he has done to make it easier for others to follow in his footsteps. "I didn't start trying to speak at conferences until I was at least seven or eight years into...]]></itunes:subtitle>
			<itunes:summary>Adam talks to Karl Hughes about his path to becoming a conference speaker and the work he has done to make it easier for others to follow in his footsteps.
</itunes:summary>
			<itunes:episode>47</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Don and Adam discuss folds</title>
			<itunes:title>Don and Adam discuss folds</itunes:title>
			<pubDate>Sat, 15 Feb 2020 20:30:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[48b2f538-d665-49a1-8fb1-cec407f856f3]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/046_-_Fold.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/b/7/7/7/b777b4ed077e83a6/046_-_Fold.jpg" />
			<description><![CDATA[<p>Today we try a different format. Adam invites his neighbour, Don McKay, over to ask him questions. An interesting discussion on recursion, corecursion and the naming of the podcast unfolds.</p> <p>"John was saying, we conclude that since modularity is the key to successful programming, dah, dah, dah, dah, dah. I think what he means by modularity is okay, we write our fold and it's like three lines long.  Once that exists somewhere, we don't have to have that base case all over our code. We ended up programming a higher declarative level.<br /> The other reason is just I really like clean abstractions. There's more to learn but once you do, you're able to kind of have this language where you can talk about these things at a higher level"</p> <ul> <li><a href= "https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf">Why Functional Programming Matters - John Hughes</a></li> <li><a href="https://www.youtube.com/watch?v=6a5Ti0r8Q2s">Beautiful Folds - Gabriel Gonzalez</a></li> <li><a href= ""https:/softwaremill.com/beautiful-folds-in-scala/">Folds in Scala</a></li> <li><a href= "https://github.com/softwaremill/recursion-training">Recursion Training</a></li> </ul> <p><a href= "https://corecursive.com/046-don-and-adam-folds/">https://corecursive.com/046-don-and-adam-folds/</a></p>]]></description>
			<content:encoded><![CDATA[<p>Today we try a different format. Adam invites his neighbour, Don McKay, over to ask him questions. An interesting discussion on recursion, corecursion and the naming of the podcast unfolds.</p> <p>"John was saying, we conclude that since modularity is the key to successful programming, dah, dah, dah, dah, dah. I think what he means by modularity is okay, we write our fold and it's like three lines long.  Once that exists somewhere, we don't have to have that base case all over our code. We ended up programming a higher declarative level. The other reason is just I really like clean abstractions. There's more to learn but once you do, you're able to kind of have this language where you can talk about these things at a higher level"</p> <ul> <li><a href= "https://www.cs.kent.ac.uk/people/staff/dat/miranda/whyfp90.pdf">Why Functional Programming Matters - John Hughes</a></li> <li><a href="https://www.youtube.com/watch?v=6a5Ti0r8Q2s">Beautiful Folds - Gabriel Gonzalez</a></li> <li>]]></content:encoded>
			<enclosure length="36222794" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/046_-_Fold.mp3?dest-id=628353" />
			<itunes:duration>36:17</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Today we try a different format. Adam invites his neighbour, Don McKay, over to ask him questions. An interesting discussion on recursion, corecursion and the naming of the podcast unfolds. "John was saying, we conclude that since modularity is the...]]></itunes:subtitle>
			<itunes:summary>Today we try a different format.  Adam invites his neighbour, Don McKay, over to ask him questions.  An interesting discussion on recursion, corecursion and the naming of the podcast unfolds.
</itunes:summary>
			<itunes:episode>46</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>David Heinemeier Hansson, Software Contrarian</title>
			<itunes:title>David Heinemeier Hansson, Software Contrarian</itunes:title>
			<pubDate>Sat, 01 Feb 2020 10:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[18a66698-e105-4dff-bfae-58abc51f89d0]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/045-DHH.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p>David Heinemeier Hansson talks to Adam about being avoiding a software monoculture. He explains why we should find a programming language that speaks to us, why ergonomics matter and why single page apps and microservices are not for him.</p> <p>"That is the pleasure and privilege of working with the web. No one knows what you built it. It, you could build an in basic, you can build it a Ocaml, you can build in the Haskell, you can build it in whatever Ruby. No one is going to be none the wiser you get to choose"</p> <p>You want to write for the web. I mean, literally every programming language that's ever been invented and known to humankind is serving a webpage somewhere."</p> <p>"There's just something heartwarming in that, that this idea of the monoculture that like this is all just a battle to the death and there's going to be one framework and there's going to be one programming language that lifts is left standing. Programmers are really drawn into that right into that horse race."</p> <p>So much of their technology choices seem to be predicated on like, is this popular? Is this going to be popular next year? Do you know what I mean?"</p> <p>"The crimes against programming humanities that have been done in the service of single page applications are far worse than the ones that have been done in the service of microservices.</p> <p>But then of course, as it is, lots of people combine the two. So it's a fleet of microservices serving a single page application, and that's just where it bam, my head explodes with like, yeah, I would rather retire and fucking, I don't know, make weaved baskets than deal with that shit."</p> <p>"I'm not saying that email is sort of in its base form is wonderful, but you know what is wonderful asynchronous. Write-ups of cohesive, full thoughts, people using actual goddamn paragraphs to describe ideas and proposals, and they put those paragraphs together into form entire, cohesive thoughts. And then letting someone take that in, read those several paragraphs, sit back for more than five minutes. Ponder that. And then respond."</p> <p>Links:</p> <ul> <li><a href="https://m.signalvnoise.com/the-majestic-monolith/">The Majestic Monolith</a></li> <li><a style= "font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;" href="https://twitter.com/dhh/status/695270337836113921">On React</a></li> <li><a style= "font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;" href="https://dhh.dk/2014/tdd-is-dead-long-live-testing.html">TDD is Dead</a></li> <li><a style= "font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;" href="https://www.youtube.com/watch?v=9LfmrkyP81M">RailsConf 2014</a></li> </ul> <p><a href= "https://corecursive.com/045-david-heinemeier-hansson-software-contrarian/"> Podcast Page</a></p>]]></description>
			<content:encoded><![CDATA[<p>David Heinemeier Hansson talks to Adam about being avoiding a software monoculture. He explains why we should find a programming language that speaks to us, why ergonomics matter and why single page apps and microservices are not for him.</p> <p>"That is the pleasure and privilege of working with the web. No one knows what you built it. It, you could build an in basic, you can build it a Ocaml, you can build in the Haskell, you can build it in whatever Ruby. No one is going to be none the wiser you get to choose"</p> <p>You want to write for the web. I mean, literally every programming language that's ever been invented and known to humankind is serving a webpage somewhere."</p> <p>"There's just something heartwarming in that, that this idea of the monoculture that like this is all just a battle to the death and there's going to be one framework and there's going to be one programming language that lifts is left standing. Programmers are really drawn into that right into that horse race."</p> <p>So much of their technology choices seem to be predicated on like, is this popular? Is this going to be popular next year? Do you know what I mean?"</p> <p>"The crimes against programming humanities that have been done in the service of single page applications are far worse than the ones that have been done in the service of microservices.</p> <p>But then of course, as it is, lots of people combine the two. So it's a fleet of microservices serving a single page application, and that's just where it bam, my head explodes with like, yeah, I would rather retire and fucking, I don't know, make weaved baskets than deal with that shit."</p> <p>"I'm not saying that email is sort of in its base form is wonderful, but you know what is wonderful asynchronous. Write-ups of cohesive, full thoughts, people using actual goddamn paragraphs to describe ideas and proposals, and they put those paragraphs together into form entire, cohesive thoughts. And then letting someone take that in, read those several paragraphs, sit back for more than five minutes. Ponder that. And then respond."</p> <p>Links:</p> <ul> <li><a href="https://m.signalvnoise.com/the-majestic-monolith/">The Majestic Monolith</a></li> <li><a style= "font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;" href="https://twitter.com/dhh/status/695270337836113921">On React</a></li> <li><a style= "font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;" href="https://dhh.dk/2014/tdd-is-dead-long-live-testing.html">TDD is Dead</a></li> <li><a style= "font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;" href="https://www.youtube.com/watch?v=9LfmrkyP81M">RailsConf 2014</a></li> </ul> <p><a href= "https://corecursive.com/045-david-heinemeier-hansson-software-contrarian/"> Podcast Page</a></p>]]></content:encoded>
			<enclosure length="61065685" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/045-DHH.mp3?dest-id=628353" />
			<itunes:duration>01:02:09</itunes:duration>
			<itunes:explicit>yes</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[David Heinemeier Hansson talks to Adam about being avoiding a software monoculture. He explains why we should find a programming language that speaks to us, why ergonomics matter and why single page apps and microservices are not for him. "That is the...]]></itunes:subtitle>
			<itunes:summary>David Heinemeier Hansson talks to Adam about being avoiding a software monoculture. He explains why we should find a programming language that speaks to us, why ergonomics matter and why single page apps and microservices are not for him.

"That is the pleasure and privilege of working with the web. No one knows what you built it. It, you could build an in basic, you can build it in Ocaml, you can build in the Haskell, you can build it in whatever Ruby. You get to choose."</itunes:summary>
			<itunes:episode>45</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>The Business Of Developer Tools With Lee Edwards</title>
			<itunes:title>The Business Of Developer Tools With Lee Edwards</itunes:title>
			<pubDate>Wed, 18 Dec 2019 01:36:24 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[17645eda-002f-4434-af61-98594fda434c]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/043-Developer_Tools.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p>How do you build a business around tools for software engineers? Adam talks to Lee Edwards, a VC who spends a lot of time thinking about this question.</p> <p>"When I think about is this a good business, I think about is there value Accruing. The question is just how much.</p> <p>The question about is it a venture-backed business? The very, very oversimplified answer is do you believe you can get $100 million in revenue within 10 years? And those numbers are kind of fudgy. But if you can do that, you can IPO a company and it's kind of amazing that PagerDuty and Twillio each do one thing well and they're multibillion-dollar companies. "</p> <p>"Another interesting thing that venture capitalists talk about behind closed doors and probably never tweet about or say publicly because it makes them look bad. But you do often wonder if the founder of a dev tool company, a lot of times they're really altruistic and you know, I feel this way too, right? But venture capitalists are like, wait, don't give your stuff away for free. And it can sometimes be kind of like a conflict. I think when you're looking for an open-source founder, you need to look for someone as a VC that actually does want to make everyone money."</p> <p><strong>Show Notes:</strong></p> <ul> <li><a href="https://www.root.vc/">Root VC</a></li> <li><a href= "https://www.amazon.ca/Business-Value-Developer-Relations-Communities-ebook/dp/B07FKFQ1NK/ref=sr_1_2?keywords=developer+relations&qid=1576549122&sr=8-2"> The Business Value of Developer Relations - Mary Thengvall</a></li> <li><a href="https://codeclimate.com/">Code Climate</a></li> <li><a href="https://www.particle.io/">Particle.io</a></li> <li><a href="https://www.flexport.com/">FlexPort</a></li> </ul>]]></description>
			<content:encoded><![CDATA[<p>How do you build a business around tools for software engineers? Adam talks to Lee Edwards, a VC who spends a lot of time thinking about this question.</p> <p>"When I think about is this a good business, I think about is there value Accruing. The question is just how much.</p> <p>The question about is it a venture-backed business? The very, very oversimplified answer is do you believe you can get $100 million in revenue within 10 years? And those numbers are kind of fudgy. But if you can do that, you can IPO a company and it's kind of amazing that PagerDuty and Twillio each do one thing well and they're multibillion-dollar companies. "</p> <p>"Another interesting thing that venture capitalists talk about behind closed doors and probably never tweet about or say publicly because it makes them look bad. But you do often wonder if the founder of a dev tool company, a lot of times they're really altruistic and you know, I feel this way too, right? But venture capitalists are like, wait, don't give your stuff away for free. And it can sometimes be kind of like a conflict. I think when you're looking for an open-source founder, you need to look for someone as a VC that actually does want to make everyone money."</p> <p>Show Notes:</p> <ul> <li><a href="https://www.root.vc/">Root VC</a></li> <li><a href= "https://www.amazon.ca/Business-Value-Developer-Relations-Communities-ebook/dp/B07FKFQ1NK/ref=sr_1_2?keywords=developer+relations&qid=1576549122&sr=8-2"> The Business Value of Developer Relations - Mary Thengvall</a></li> <li><a href="https://codeclimate.com/">Code Climate</a></li> <li><a href="https://www.particle.io/">Particle.io</a></li> <li><a href="https://www.flexport.com/">FlexPort</a></li> </ul>]]></content:encoded>
			<enclosure length="33028241" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/043-Developer_Tools.mp3?dest-id=628353" />
			<itunes:duration>37:39</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[How do you build a business around tools for software engineers? Adam talks to Lee Edwards, a VC who spends a lot of time thinking about this question. "When I think about is this a good business, I think about is there value Accruing. The question is...]]></itunes:subtitle>
			<itunes:summary>How do you build a business around tools for software engineers? Adam talks to Lee Edwards, a VC who spends a lot of time thinking about this question.

"When I think about is this a good business, I think about is there value Accruing. The question is just how much.

The question about is it a venture-backed business? The very, very oversimplified answer is do you believe you can get $100 million in revenue within 10 years? And those numbers are kind of fudgy. "</itunes:summary>
			<itunes:episode>43</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Software in Context with Zach Tellman </title>
			<itunes:title>Software in Context with Zach Tellman</itunes:title>
			<pubDate>Mon, 02 Dec 2019 06:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[e8183951-93ac-4950-95af-b27d02cb5a9b]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/042_-_Context.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p>Adam talks to Author and Clojure advocate Zach Tellman about how great software is built.</p> <p>"If we say something is over-engineered, what we mean is it's too complex or it's too robust or it handles a bunch of situations or scenarios that are not relevant to how we're using it. It's okay for us to create narrow things. It's okay for us to create Powershells instead of bash sort of environments because that narrowness gives us the ability to go and do things we might not otherwise be able to do."</p> <p>"Twitter are built on top of Ruby because that was a reasonable thing. And then it stopped being the reasonable thing. And again, you have this kind of, I dunno, I call it hacker news induction, which is like, well I built this thing and then I built this other thing, which is almost exactly the same thing. And it worked or it didn't work. And therefore I think that this must generalize across all possible applications of this thing, right? So I tried to rails and it was great or it was awful and therefore it is great or awful, you know, in all situations. "</p> <p><a href="https://ideolalia.com/">Zach's Personal Site</a></p> <p><a href="https://elementsofclojure.com/">Elements Of Clojure Book</a></p> <p><a href= "https://corecursive.com/042-zach-tellman-software-in-context/">https://corecursive.com/042-zach-tellman-software-in-context/</a></p>]]></description>
			<content:encoded><![CDATA[<p>Adam talks to Author and Clojure advocate Zach Tellman about how great software is built.</p> <p>"If we say something is over-engineered, what we mean is it's too complex or it's too robust or it handles a bunch of situations or scenarios that are not relevant to how we're using it. It's okay for us to create narrow things. It's okay for us to create Powershells instead of bash sort of environments because that narrowness gives us the ability to go and do things we might not otherwise be able to do."</p> <p>"Twitter are built on top of Ruby because that was a reasonable thing. And then it stopped being the reasonable thing. And again, you have this kind of, I dunno, I call it hacker news induction, which is like, well I built this thing and then I built this other thing, which is almost exactly the same thing. And it worked or it didn't work. And therefore I think that this must generalize across all possible applications of this thing, right? So I tried to rails and it was great or it was awful and therefore it is great or awful, you know, in all situations. "</p> <p><a href="https://ideolalia.com/">Zach's Personal Site</a></p> <p><a href="https://elementsofclojure.com/">Elements Of Clojure Book</a></p> <p><a href= "https://corecursive.com/042-zach-tellman-software-in-context/">https://corecursive.com/042-zach-tellman-software-in-context/</a></p>]]></content:encoded>
			<enclosure length="52716002" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/042_-_Context.mp3?dest-id=628353" />
			<itunes:duration>53:27</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Adam talks to Author and Clojure advocate Zach Tellman about how great software is built. "If we say something is over-engineered, what we mean is it's too complex or it's too robust or it handles a bunch of situations or scenarios that are not...]]></itunes:subtitle>
			<itunes:summary>Adam talks to Author and Clojure advocate Zach Tellman about how great software is built.

"If we say something is over-engineered, what we mean is it's too complex or it's too robust or it handles a bunch of situations or scenarios that are not relevant to how we're using it. It's okay for us to create narrow things. It's okay for us to create powershells instead of bash sort of environments because that narrowness gives us the ability to go and do things we might not otherwise be able to do."</itunes:summary>
			<itunes:episode>42</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Beautiful and Useless Coding with Allison Parrish</title>
			<itunes:title>Beautiful and Useless Coding with Allison Parrish</itunes:title>
			<pubDate>Sat, 16 Nov 2019 10:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[1f9bbe31ea9b4e31b68f381a0a444dd3]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/041_-_Generative_Poetry.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/e/9/4/8/e948495cfeab3cea/041_-_Generative_Poetry.jpg" />
			<description><![CDATA[<p>Generative Art involves using the tools of computation to creative ends. Adam talks to Allison Parrish about how she uses word vectors to create unique poetry. Word vectors represent a fundamentally new tool for working with text.</p> <p>Adam and Allison also talk about creative computer programming and building twitter bots and what makes something art.</p> <p>"Computer programming is beautiful and useless. That's the reason that you should want to do it is not because it's going to get you a job, because it has a particular utility, but simply for the same reasons that you would pick up oil paints or do origami or something. It's something that has like an inherent beauty to it that is worthy of studying."</p> <p>"For my purpose as an artist and as like someone who teaches programming to artists and designers, I want to emphasize that it's not only a vocational thing, it's not only a way for building things like to do apps for that matter. It's not only a way to, you know, write useful applications that help to organize communities or help to do scientific work and other like good applications of programming and software engineering. But there is this like very essential, very core part of computer programming that is just joyful. Um, that's about understanding your own mind in different ways and understanding the world in different lands."</p> <p><a href= "https://www.youtube.com/watch?v=L3D0JEA1Jdc">Experimental Creative Writing with the Vectorized Word</a></p> <p><a href="http://www.numeral.com/panels/everyicon.html">Every Icon</a></p> <p><a href= "https://en.wikipedia.org/wiki/Word2vec">Word2Vect</a></p> <p><a href="https://www.decontextualize.com/">Allison Parrish's Website</a></p> <p><a href="https://tracery.io/">Tracery</a></p> <p><a href= "http://counterpathpress.org/articulations-allison-parrish">Articulations</a></p> <p><a href="https://twitter.com/everyword">Every Word</a></p>]]></description>
			<content:encoded><![CDATA[<p>Generative Art involves using the tools of computation to creative ends. Adam talks to Allison Parrish about how she uses word vectors to create unique poetry. Word vectors represent a fundamentally new tool for working with text.</p> <p>Adam and Allison also talk about creative computer programming and building twitter bots and what makes something art.</p> <p>"Computer programming is beautiful and useless. That's the reason that you should want to do it is not because it's going to get you a job, because it has a particular utility, but simply for the same reasons that you would pick up oil paints or do origami or something. It's something that has like an inherent beauty to it that is worthy of studying."</p> <p>"For my purpose as an artist and as like someone who teaches programming to artists and designers, I want to emphasize that it's not only a vocational thing, it's not only a way for building things like to do apps for that matter. It's not only a way to, you know, write useful applications that help to organize communities or help to do scientific work and other like good applications of programming and software engineering. But there is this like very essential, very core part of computer programming that is just joyful. Um, that's about understanding your own mind in different ways and understanding the world in different lands."</p> <p><a href= "https://www.youtube.com/watch?v=L3D0JEA1Jdc">Experimental Creative Writing with the Vectorized Word</a></p> <p><a href="http://www.numeral.com/panels/everyicon.html">Every Icon</a></p> <p><a href= "https://en.wikipedia.org/wiki/Word2vec">Word2Vect</a></p> <p><a href="https://www.decontextualize.com/">Allison Parrish's Website</a></p> <p><a href="https://tracery.io/">Tracery</a></p> <p><a href= "http://counterpathpress.org/articulations-allison-parrish">Articulations</a></p> <p><a href="https://twitter.com/everyword">Every Word</a></p>]]></content:encoded>
			<enclosure length="51643325" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/041_-_Generative_Poetry.mp3?dest-id=628353" />
			<itunes:duration>52:20</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Generative Art involves using the tools of computation to creative ends. Adam talks to Allison Parrish about how she uses word vectors to create unique poetry. Word vectors represent a fundamentally new tool for working with text. Adam and Allison...]]></itunes:subtitle>
			<itunes:summary>Generative Art involves using the tools of computation to creative ends. Adam talks to Allison Parrish about how she uses word vectors to create unique poetry.

"Computer programming is beautiful and useless. That's the reason that you should want to do it is not because it's going to get you a job because it has a particular utility, but simply for the same reasons that you would pick up oil paints or do origami or something."
</itunes:summary>
			<itunes:episode>41</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Tech Evangelism and Open source With Gabriel Gonzalez</title>
			<itunes:title>Tech Evangelism and Open source With Gabriel Gonzalez</itunes:title>
			<pubDate>Fri, 01 Nov 2019 09:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[cb46fa6fc9494f5991ea6d6d75603429]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/040_-_Tech_Evangalism.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/0/0/8/a/008afc6ca3faf21a/040_-_Tech_Evangalism.jpg" />
			<description><![CDATA[<p>What makes some pieces of technology take off? Why is java popular and not small talk or Haskell. Gabe is a popular blogger, a former Haskell cheerleader, and creator of the Dhal configuration language. Today we talk about marketing and tech evangelism.</p> <p>"One common mistake I see a lot of new open source developers make is they tried to build what I call the hype train. Where they have started a new project that has a lot of poTech Evangelism with Gabriel Gonzalez<br /> tential and they advertise on hacker news hoping that, okay, we're gonna generate a lot of hype, maybe get a lot of influx of new contributors, new contributes, new features, generate more hype and so forth."</p> <p>"They hope that there'll be that virtuous cycle that will get them to the mainstream in practice, that never happens. Usually, the thing about contributors is that their needs are always going to be fragmented, right? If you have eight new contributors, they're going to be taking you in eight different directions. You should focus on one direction and sometimes that means not only doing a lot of work yourself, but it's explicitly saying no to something and saying this is not where I want to take the product right now."</p> <p>Links:</p> <p><a href= "https://www.amazon.com/Crossing-Chasm-Marketing-High-Tech-Mainstream/dp/0060517123"> Crossing the Chasm</a></p> <p><a href="https://dhall-lang.org">Dhall Lang</a></p> <p><a href= "https://www.se-radio.net/2019/08/episode-375-gabriel-gonzalez-on-configuration/"> Adam's SE Radio Interview with Gabe</a></p> <p><a href="http://www.haskellforall.com/">Haskell For All - Gabe's Blog</a></p>]]></description>
			<content:encoded><![CDATA[<p>What makes some pieces of technology take off? Why is java popular and not small talk or Haskell. Gabe is a popular blogger, a former Haskell cheerleader, and creator of the Dhal configuration language. Today we talk about marketing and tech evangelism.</p> <p>"One common mistake I see a lot of new open source developers make is they tried to build what I call the hype train. Where they have started a new project that has a lot of poTech Evangelism with Gabriel Gonzalez tential and they advertise on hacker news hoping that, okay, we're gonna generate a lot of hype, maybe get a lot of influx of new contributors, new contributes, new features, generate more hype and so forth."</p> <p>"They hope that there'll be that virtuous cycle that will get them to the mainstream in practice, that never happens. Usually, the thing about contributors is that their needs are always going to be fragmented, right? If you have eight new contributors, they're going to be taking you in eight different directions. You should focus on one direction and sometimes that means not only doing a lot of work yourself, but it's explicitly saying no to something and saying this is not where I want to take the product right now."</p> <p>Links:</p> <p><a href= "https://www.amazon.com/Crossing-Chasm-Marketing-High-Tech-Mainstream/dp/0060517123"> Crossing the Chasm</a></p> <p><a href="https://dhall-lang.org">Dhall Lang</a></p> <p><a href= "https://www.se-radio.net/2019/08/episode-375-gabriel-gonzalez-on-configuration/"> Adam's SE Radio Interview with Gabe</a></p> <p><a href="http://www.haskellforall.com/">Haskell For All - Gabe's Blog</a></p>]]></content:encoded>
			<enclosure length="65789505" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/040_-_Tech_Evangalism.mp3?dest-id=628353" />
			<itunes:duration>01:07:05</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[What makes some pieces of technology take off? Why is java popular and not small talk or Haskell. Gabe is a popular blogger, a former Haskell cheerleader, and creator of the Dhal configuration language. Today we talk about marketing and tech...]]></itunes:subtitle>
			<itunes:summary>What makes some pieces of technology take off? Gabe is a popular blogger, a former Haskell cheerleader, and creator of the Dhal configuration language. Today we talk about marketing and tech evangelism.

"One common mistake I see a lot of new open source developers make is they tried to build what I call the hype train. Where they have started a new project and they advertise on hacker news hoping that maybe [they will]  get a lot of influx of new contributors"</itunes:summary>
			<itunes:episode>40</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Structure and Interpretation of Computer Programs with Hal Abelson</title>
			<itunes:title>Structure and Interpretation of Computer Programs with Hal Abelson</itunes:title>
			<pubDate>Tue, 01 Oct 2019 09:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[f1ecb0dfa07f46f49fe4d13aa009b985]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/039_-_SICP.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p>Adam talks to Hal Abelson about the textbook he coauthored in 1984, SICP and why it is still popular and influential today.</p> <p>"If you pick up almost any computing book it starts out 'here are these datatypes, these operations that you do' and somewhere around 20 or 30% through the book, they show you how to define a function or a procedure. Whereas we really take the opposite approach. We say the key thing is abstraction. So we kind of start there."</p> <p>"The axe [the book] is grinding is that people write programs to do one particular thing. And then the price of that is that a whole lot of software engineering ends up being trying to get out of the hole you dug yourself into because you made a program that was too specific."</p> <ul> <li><a href="https://www.youtube.com/watch?v=2Op3QLzMgSY">SICP Lectures</a></li> <li><a href= "https://mitpress.mit.edu/sites/default/files/sicp/index.html">The Structure and </a><a href= "https://mitpress.mit.edu/sites/default/files/sicp/index.html">Interpretation</a> <a href= "https://mitpress.mit.edu/sites/default/files/sicp/index.html">of Computer Programs</a> </li> <li><a href= "http://www.gigamonkeys.com/code-quarterly/2011/hal-abelson/">Hal Interview</a></li> </ul> <p><a href= "https://corecursive.com/039-hal-abelson-sicp/">https://corecursive.com/039-hal-abelson-sicp/</a></p>]]></description>
			<content:encoded><![CDATA[<p>Adam talks to Hal Abelson about the textbook he coauthored in 1984, SICP and why it is still popular and influential today.</p> <p>"If you pick up almost any computing book it starts out 'here are these datatypes, these operations that you do' and somewhere around 20 or 30% through the book, they show you how to define a function or a procedure. Whereas we really take the opposite approach. We say the key thing is abstraction. So we kind of start there."</p> <p>"The axe [the book] is grinding is that people write programs to do one particular thing. And then the price of that is that a whole lot of software engineering ends up being trying to get out of the hole you dug yourself into because you made a program that was too specific."</p> <ul> <li><a href="https://www.youtube.com/watch?v=2Op3QLzMgSY">SICP Lectures</a></li> <li><a href= "https://mitpress.mit.edu/sites/default/files/sicp/index.html">The Structure and </a><a href= "https://mitpress.mit.edu/sites/default/files/sicp/index.html">Interpretation</a> <a href= "https://mitpress.mit.edu/sites/default/files/sicp/index.html">of Computer Programs</a> </li> <li><a href= "http://www.gigamonkeys.com/code-quarterly/2011/hal-abelson/">Hal Interview</a></li> </ul> <p><a href= "https://corecursive.com/039-hal-abelson-sicp/">https://corecursive.com/039-hal-abelson-sicp/</a></p>]]></content:encoded>
			<enclosure length="55485815" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/039_-_SICP.mp3?dest-id=628353" />
			<itunes:duration>56:20</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Adam talks to Hal Abelson about the textbook he coauthored in 1984, SICP and why it is still popular and influential today. "If you pick up almost any computing book it starts out 'here are these datatypes, these operations that you do' and somewhere...]]></itunes:subtitle>
			<itunes:summary>Adam talks to Hal Abelson about the textbook he coauthored in 1984, SICP and why it is still popular and influential today.

"The axe [the book] is grinding is that people write programs to do one particular thing. And then the price of that is that a whole lot of software engineering ends up being trying to get out of the hole you dug yourself into because you made a program that was too specific."</itunes:summary>
			<itunes:episode>39</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Open Source Health and Diversity with Heather C Miller</title>
			<itunes:title>Open Source Health and Diversity with Heather C Miller</itunes:title>
			<pubDate>Sun, 15 Sep 2019 20:35:17 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[ab44a6399d5240f0996d9ad89da414d2]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/038_-_Open_Source.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p>Heather C Miller is an Assistant Processor at CMU. She is concerned that key open source projects are at risk of failure and no one is paying attention. Adam talks to her about open source, how it grows, the diversity problems it has and much more.</p> <p>Heather also shares some interesting stories about the early days of Scala and her ideas for increasing diversity in tech.</p> <p><a href="https://www.youtube.com/watch?v=b_743P8XuvA">Heather's JuliaCon keynote</a></p> <p><a href= "https://www.fordfoundation.org/about/library/reports-and-studies/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure/"> Digital Infrastructure</a></p> <p><a href="https://scala.epfl.ch/">Scala Center</a></p> <p><a href= "https://corecursive.com/038-heather-miller-open-source/">https://corecursive.com/038-heather-miller-open-source/</a></p>]]></description>
			<content:encoded><![CDATA[<p>Heather C Miller is an Assistant Processor at CMU. She is concerned that key open source projects are at risk of failure and no one is paying attention. Adam talks to her about open source, how it grows, the diversity problems it has and much more.</p> <p>Heather also shares some interesting stories about the early days of Scala and her ideas for increasing diversity in tech.</p> <p><a href="https://www.youtube.com/watch?v=b_743P8XuvA">Heather's JuliaCon keynote</a></p> <p><a href= "https://www.fordfoundation.org/about/library/reports-and-studies/roads-and-bridges-the-unseen-labor-behind-our-digital-infrastructure/"> Digital Infrastructure</a></p> <p><a href="https://scala.epfl.ch/">Scala Center</a></p> <p><a href= "https://corecursive.com/038-heather-miller-open-source/">https://corecursive.com/038-heather-miller-open-source/</a></p>]]></content:encoded>
			<enclosure length="41209341" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/038_-_Open_Source.mp3?dest-id=628353" />
			<itunes:duration>41:28</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Heather C Miller is an Assistant Processor at CMU. She is concerned that key open source projects are at risk of failure and no one is paying attention. Adam talks to her about open source, how it grows, the diversity problems it has and much more....]]></itunes:subtitle>
			<itunes:summary>Heather C Miller is an Assistant Processor at CMU. She is concerned that key open source projects are at risk of failure and no one is paying attention. Adam talks to her about open source, how it grows, the diversity problems it has and much more.</itunes:summary>
			<itunes:episode>38</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Compiling to Bytecode with Thorsten Ball</title>
			<itunes:title>Compiling to Bytecode with Thorsten Ball</itunes:title>
			<pubDate>Sun, 01 Sep 2019 20:37:38 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[12bafcf1fc9d413c9de01fc9e3665d16]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/037_-_Compiler.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/6/5/c/e/65cecb5248b1eeec/037_-_Compiler.jpg" />
			<description><![CDATA[<p>What do compilers do? What is the runtime of a language? What does it mean to compile something down to bytecode and what executes the byte code. Throsten Ball Answers these questions in this interview with Adam.</p> <p>"A virtual machine is a computer built-in software, a CPU built-in software"<br /> "Compilers can be slow. You know, I grew up running Linux and I had Gentoo running, so I basically let my computer run for the whole night to compile my window manager. So I do know how slow compilers can be and the reason they're slow is because you're paying the upfront costs that an interpreter pays at runtime. You're paying a little bit more because you're doing additional optimizations. You're shifting the cost to a point in time where you're happy to pay it."</p> <p><a href="https://compilerbook.com/">Writing a compiler in GO</a></p> <p><a href="https://github.com/gcc-mirror/gcc">GCC Codebase Mirror</a></p> <p><a href="https://github.com/llvm/llvm-project">LLVM Codebase</a></p> <p><a href="https://bellard.org/tcc/">TCC Compiler</a></p> <p><a href="https://github.com/rswier/c4">C in 4 functions</a></p> <p><a href="https://github.com/rui314/8cc">8CC - small self hosting compiler</a></p> <p><a href= "https://corecursive.com/037-thorsten-ball-compilers/">https://corecursive.com/037-thorsten-ball-compilers/</a></p> <p> </p>]]></description>
			<content:encoded><![CDATA[<p>What do compilers do? What is the runtime of a language? What does it mean to compile something down to bytecode and what executes the byte code. Throsten Ball Answers these questions in this interview with Adam.</p> <p>"A virtual machine is a computer built-in software, a CPU built-in software" "Compilers can be slow. You know, I grew up running Linux and I had Gentoo running, so I basically let my computer run for the whole night to compile my window manager. So I do know how slow compilers can be and the reason they're slow is because you're paying the upfront costs that an interpreter pays at runtime. You're paying a little bit more because you're doing additional optimizations. You're shifting the cost to a point in time where you're happy to pay it."</p> <p><a href="https://compilerbook.com/">Writing a compiler in GO</a></p> <p><a href="https://github.com/gcc-mirror/gcc">GCC Codebase Mirror</a></p> <p><a href="https://github.com/llvm/llvm-project">LLVM Codebase</a></p> <p><a href="https://bellard.org/tcc/">TCC Compiler</a></p> <p><a href="https://github.com/rswier/c4">C in 4 functions</a></p> <p><a href="https://github.com/rui314/8cc">8CC - small self hosting compiler</a></p> <p><a href= "https://corecursive.com/037-thorsten-ball-compilers/">https://corecursive.com/037-thorsten-ball-compilers/</a></p> <p> </p>]]></content:encoded>
			<enclosure length="57525944" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/037_-_Compiler.mp3?dest-id=628353" />
			<itunes:duration>58:28</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[What do compilers do? What is the runtime of a language? What does it mean to compile something down to bytecode and what executes the byte code. Throsten Ball Answers these questions in this interview with Adam. "A virtual machine is a computer...]]></itunes:subtitle>
			<itunes:summary>What do compilers do? What is the runtime of a language? What does it mean to compile something down to bytecode and what executes the byte code. Throsten Ball Answers these questions in this interview with Adam.

"A virtual machine is a computer built-in software, a CPU built-in software"</itunes:summary>
			<itunes:episode>37</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Bartosz Milewski on Category Theory</title>
			<itunes:title>Category Theory with Bartosz Milewski</itunes:title>
			<pubDate>Thu, 15 Aug 2019 10:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[210c85fd9a7b4de6b1b06b7bb0217443]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/035_-_CT.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p>Today Adam talks to Bartosz Milewski. He is the author of a famous blog series, lecture series and now book on Category Theory for programmers.</p> <p>The world of functional programming is rife with terminology imported from abstract algebra and Category Theory. In fact, it may be one of the most valid criticisms of functional programming is the use of Category-Theoretic terminology that can be unwelcoming to newcomers.</p> <p>Category theory can also be a tool to teach us to see software development in a different light and it can teach us to build better software. Bartosz is also just an interesting person, if you haven't heard of him yet, you are in for a treat.</p> <p><a href="https://bartoszmilewski.com/">Bartosz's Website</a></p> <p><a href= "https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/"> Blog Series</a></p> <p><a href= "https://github.com/hmemcpy/milewski-ctfp-pdf">Book</a></p> <p><a href="https://www.youtube.com/watch?v=JH_Ou17_zyU">Lecture Series</a></p> <p><a href= "https://corecursive.com/035-bartosz-milewski-category-theory/">https://corecursive.com/035-bartosz-milewski-category-theory/</a></p>]]></description>
			<content:encoded><![CDATA[<p>Today Adam talks to Bartosz Milewski. He is the author of a famous blog series, lecture series and now book on Category Theory for programmers.</p> <p>The world of functional programming is rife with terminology imported from abstract algebra and Category Theory. In fact, it may be one of the most valid criticisms of functional programming is the use of Category-Theoretic terminology that can be unwelcoming to newcomers.</p> <p>Category theory can also be a tool to teach us to see software development in a different light and it can teach us to build better software. Bartosz is also just an interesting person, if you haven't heard of him yet, you are in for a treat.</p> <p><a href="https://bartoszmilewski.com/">Bartosz's Website</a></p> <p><a href= "https://bartoszmilewski.com/2014/10/28/category-theory-for-programmers-the-preface/"> Blog Series</a></p> <p><a href= "https://github.com/hmemcpy/milewski-ctfp-pdf">Book</a></p> <p><a href="https://www.youtube.com/watch?v=JH_Ou17_zyU">Lecture Series</a></p> <p><a href= "https://corecursive.com/035-bartosz-milewski-category-theory/">https://corecursive.com/035-bartosz-milewski-category-theory/</a></p>]]></content:encoded>
			<enclosure length="52807841" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/035_-_CT.mp3?dest-id=628353" />
			<itunes:duration>53:33</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Today Adam talks to Bartosz Milewski. He is the author of a famous blog series, lecture series and now book on Category Theory for programmers. The world of functional programming is rife with terminology imported from abstract algebra and Category...]]></itunes:subtitle>
			<itunes:summary>Today Adam talks to Bartosz Milewski. He is the author of a famous blog series, lecture series and now book on Category Theory for programmers.

Category theory can also be a tool to teach us to see software development in a different light and it can teach us to build better software. Bartosz is also just an interesting person, if you haven't heard of him yet, you are in for a treat.</itunes:summary>
			<itunes:episode>36</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Jimmy Koppel on Advanced Software Design</title>
			<itunes:title>Jimmy Koppel on Advanced Software Design</itunes:title>
			<pubDate>Thu, 01 Aug 2019 10:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[01256e627bbc4be1948fffee63d0d053]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/036_-_Advanced_Software_Design.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/5/d/2/c/5d2c020283239edc/036_-_Advanced_Software_Design.jpg" />
			<description><![CDATA[<p>How do we create great software? What are the important skills need to properly review a PR? How do you identify assumptions of a code base and the stable contracts of a software module?</p> <p>Jimmy Koppel is working on his Ph.D. in the field of program synthesis at MIT.  He was previously paid 100 thousand dollars to drop out of university by Peter Thiel, but yet still graduated with two degrees.  </p> <p>The most interesting, however, about Jimmy is he is working hard to teach the world how to design better software.<br /> Due to his time working on program synthesis, he developed some unique insights into what makes software good, and what makes it bad, and he spends time teaching people his insights.</p> <p><br /> <a href= "http://www.pathsensitive.com/2018/01/the-three-levels-of-software-why-code.html"> Three Level of Software</a></p> <p><a href= "https://www.cmu.edu/news/stories/archives/2012/july/july2_koppelthielfellowship.html"> Peter Thiel 20 under 20</a></p> <p><a href= "http://www.pathsensitive.com/2018/01/the-benjamin-franklin-method-of-reading.html"> Benjamin Franklin Method</a> <br /> <br /> <a href= "http://www.pathsensitive.com/2018/12/my-strange-loop-talk-you-are-program.html"> You are a Program Synthesizer</a></p> <p><a href="http://jameskoppelcoaching.com">Jimmy's Coaching Program</a></p> <p>Episode Page: <a href= "https://corecursive.com/036-jimmy-koppel-advanced-software-design/">https://corecursive.com/036-jimmy-koppel-advanced-software-design/</a></p>]]></description>
			<content:encoded><![CDATA[<p>How do we create great software? What are the important skills need to properly review a PR? How do you identify assumptions of a code base and the stable contracts of a software module?</p> <p>Jimmy Koppel is working on his Ph.D. in the field of program synthesis at MIT.  He was previously paid 100 thousand dollars to drop out of university by Peter Thiel, but yet still graduated with two degrees.  </p> <p>The most interesting, however, about Jimmy is he is working hard to teach the world how to design better software. Due to his time working on program synthesis, he developed some unique insights into what makes software good, and what makes it bad, and he spends time teaching people his insights.</p> <p> <a href= "http://www.pathsensitive.com/2018/01/the-three-levels-of-software-why-code.html"> Three Level of Software</a></p> <p><a href= "https://www.cmu.edu/news/stories/archives/2012/july/july2_koppelthielfellowship.html"> Peter Thiel 20 under 20</a></p> <p><a href= "http://www.pathsensitive.com/2018/01/the-benjamin-franklin-method-of-reading.html"> Benjamin Franklin Method</a>   <a href= "http://www.pathsensitive.com/2018/12/my-strange-loop-talk-you-are-program.html"> You are a Program Synthesizer</a></p> <p><a href="http://jameskoppelcoaching.com">Jimmy's Coaching Program</a></p> <p>Episode Page: <a href= "https://corecursive.com/036-jimmy-koppel-advanced-software-design/">https://corecursive.com/036-jimmy-koppel-advanced-software-design/</a></p>]]></content:encoded>
			<enclosure length="52487750" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/036_-_Advanced_Software_Design.mp3?dest-id=628353" />
			<itunes:duration>53:13</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[How do we create great software? What are the important skills need to properly review a PR? How do you identify assumptions of a code base and the stable contracts of a software module? Jimmy Koppel is working on his Ph.D. in the field of program...]]></itunes:subtitle>
			<itunes:summary>How do we create great software? What are the important skills need to properly review a PR? How do you identify assumptions of a code base and the stable contracts of a software module?

Jimmy Koppel is working on his Ph.D. in the field of program synthesis at MIT.  He was previously paid 100 thousand dollars to drop out of university by Peter Thiel, but yet still graduated with two degrees. </itunes:summary>
			<itunes:episode>35</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Chris Krycho on Typescript</title>
			<itunes:title>Chris Krycho on Typescript</itunes:title>
			<pubDate>Mon, 15 Jul 2019 10:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[ddf043c785e049ebb312a537a27c41fb]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/034_-_TypeScript.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p>How do we make javascript easier to work with? Chris Krycho has been using typescript to add types to javascript since 2016.</p> <p>Chris is a software developer at LinkedIn who, at his previous gig, worked on converting one of the largest Ember apps in the world to TypeScript. I was shocked by the size. Chris also loves Rust and types and is a former C and FORTRAN programmers. He hosted a podcast called the New Rustacean, which he has retired from.</p> <p>Today we talk about TypeScript and when you should use it. We also talk about Language Server Protocols, Rust, working with large codebases, Structural types, row polymorphism and talking code over audio.</p> <ul> <li><a href="http://chriskrycho.com">Chris's Blog</a> <a href= "hhttp://www.typescriptlang.org/">TypeScript</a></li> <li><a href="https://newrustacean.com">New Rustacean</a></li> <li><a href= "https://github.com/chriskrycho/emberconf-2019-slides/blob/master/talk.md"> Chris's Typescript</a></li> <li><a href= "https://ranjitjhala.github.io/static/refinement_types_for_typescript.pdf"> Refinement types in TypeScript</a></li> <li><a href="https://winningslowly.org/">Winning Slowly Podcast</a></li> </ul> <p><a href= "https://corecursive.com/034-chris-krycho-typescript/">https://corecursive.com/034-chris-krycho-typescript/</a></p> <p> </p>]]></description>
			<content:encoded><![CDATA[<p>How do we make javascript easier to work with? Chris Krycho has been using typescript to add types to javascript since 2016.</p> <p>Chris is a software developer at LinkedIn who, at his previous gig, worked on converting one of the largest Ember apps in the world to TypeScript. I was shocked by the size. Chris also loves Rust and types and is a former C and FORTRAN programmers. He hosted a podcast called the New Rustacean, which he has retired from.</p> <p>Today we talk about TypeScript and when you should use it. We also talk about Language Server Protocols, Rust, working with large codebases, Structural types, row polymorphism and talking code over audio.</p> <ul> <li><a href="http://chriskrycho.com">Chris's Blog</a> <a href= "hhttp://www.typescriptlang.org/">TypeScript</a></li> <li><a href="https://newrustacean.com">New Rustacean</a></li> <li><a href= "https://github.com/chriskrycho/emberconf-2019-slides/blob/master/talk.md"> Chris's Typescript</a></li> <li><a href= "https://ranjitjhala.github.io/static/refinement_types_for_typescript.pdf"> Refinement types in TypeScript</a></li> <li><a href="https://winningslowly.org/">Winning Slowly Podcast</a></li> </ul> <p><a href= "https://corecursive.com/034-chris-krycho-typescript/">https://corecursive.com/034-chris-krycho-typescript/</a></p> <p> </p>]]></content:encoded>
			<enclosure length="60969124" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/034_-_TypeScript.mp3?dest-id=628353" />
			<itunes:duration>01:10:55</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[How do we make javascript easier to work with? Chris Krycho has been using typescript to add types to javascript since 2016. Chris is a software developer at LinkedIn who, at his previous gig, worked on converting one of the largest Ember apps in the...]]></itunes:subtitle>
			<itunes:summary>How do we make javascript easier to work with? Chris Krycho has been using typescript to add types to javascript since 2016.

 Chris also loves Rust and types and is a former C and FORTRAN programmers. He hosted a podcast called the New Rustacean, which he has retired from.

Today we talk about TypeScript and when you should use it. We also talk about Language Server Protocols, Rust, working with large codebases, Structural types, row polymorphism and talking code over audio.</itunes:summary>
			<itunes:episode>34</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Rethinking Technological Positivism with Cory Doctorow</title>
			<itunes:title>Radicalized Tech with Cory Doctorow</itunes:title>
			<pubDate>Sat, 15 Jun 2019 10:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[139aa722e89749d6aade5e2795319cd1]]></guid>
			<link><![CDATA[http://corecursive.com/radicalized-tech-with-cory-doctorow]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p>Self-driving cars or armed autonomous military robots may make use of the same technologies. In a certain sense, we as software developers are helping to build and shape the future. What does the future look like and are we helping build the right one? Is technology a force for liberty or oppression.</p> <p>Cory Doctorow is one of my favorite authors and also a public intellectual with a keen insight into the dangers we face a society. In this interview, I ask him how to avoid ending up in a techno-totalitarian society. We also talk about Turing, DRM, data mining and monopolies.</p> <p> </p> <ul> <li><a href="https://www.youtube.com/watch?v=HUEvRyemKSg">The coming war on general computation</a> </li> <li><a href="https://craphound.com">Cory's Personal Site</a> </li> <li><a href="https://craphound.com/shop/">Radicalized (and other books)</a> </li> <li><a href="https://www.eff.org/">EFF</a> </li> </ul> <p><a href= "https://corecursive.com/33-cory-doctorow-digital-rights/">Website for Page</a></p>]]></description>
			<content:encoded><![CDATA[<p>Self-driving cars or armed autonomous military robots may make use of the same technologies. In a certain sense, we as software developers are helping to build and shape the future. What does the future look like and are we helping build the right one? Is technology a force for liberty or oppression.</p> <p>Cory Doctorow is one of my favorite authors and also a public intellectual with a keen insight into the dangers we face a society. In this interview, I ask him how to avoid ending up in a techno-totalitarian society. We also talk about Turing, DRM, data mining and monopolies.</p> <p> </p> <ul> <li><a href="https://www.youtube.com/watch?v=HUEvRyemKSg">The coming war on general computation</a> </li> <li><a href="https://craphound.com">Cory's Personal Site</a> </li> <li><a href="https://craphound.com/shop/">Radicalized (and other books)</a> </li> <li><a href="https://www.eff.org/">EFF</a> </li> </ul> <p><a href= "https://corecursive.com/33-cory-doctorow-digital-rights/">Website for Page</a></p>]]></content:encoded>
			<enclosure length="60144795" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/033_-_Cory_Doctorow.mp3?dest-id=628353" />
			<itunes:duration>01:01:12</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Self-driving cars or armed autonomous military robots may make use of the same technologies. In a certain sense, we as software developers are helping to build and shape the future. What does the future look like and are we helping build the right...]]></itunes:subtitle>
			<itunes:summary>Self-driving cars or armed autonomous military robots may make use of the same technologies. In a certain sense, we as software developers are helping to build and shape the future. What does the future look like and are we helping build the right one? Is technology a force for liberty or oppression.</itunes:summary>
			<itunes:episode>33</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Crafting Interpreters With Bob Nystrom</title>
			<itunes:title>Crafting Interpreters With Bob Nystrom</itunes:title>
			<pubDate>Fri, 31 May 2019 09:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[e726840c22ee42c49a85759d839234e1]]></guid>
			<link><![CDATA[http://corecursive.com/crafting-interpreters-with-bob-nystrom]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/3/3/9/c/339c8961aaf10969/032_-_Bob_NyStrom.jpg" />
			<description><![CDATA[<p>Bob Nystrom is the author of Crafting Interpreters. I speak with Nystrom about building a programming language and an interpreter implementation for it. We talk about parsing, the difference between compiler and interpreters and a lot more.</p> <p>If you are wondering why many languages have hand-rolled parser implementations yet much work on build language implementations focuses on parser and tokenizer generators then Bob's insights will be eye-opening. Also, if you've ever used regexes to pull strings apart into structured data, and I sure have, then Bob's perspective on the simplicity of hand-rolled parsers will certainly open up some new possibilities for you.</p> <p>Links:</p> <p><a href= "http://craftinginterpreters.com/">http://craftinginterpreters.com/</a><br />  <a href= "http://gameprogrammingpatterns.com/">http://gameprogrammingpatterns.com/</a><br />  <a href= "http://journal.stuffwithstuff.com/">http://journal.stuffwithstuff.com/</a></p>]]></description>
			<content:encoded><![CDATA[<p>Bob Nystrom is the author of Crafting Interpreters. I speak with Nystrom about building a programming language and an interpreter implementation for it. We talk about parsing, the difference between compiler and interpreters and a lot more.</p> <p>If you are wondering why many languages have hand-rolled parser implementations yet much work on build language implementations focuses on parser and tokenizer generators then Bob's insights will be eye-opening. Also, if you've ever used regexes to pull strings apart into structured data, and I sure have, then Bob's perspective on the simplicity of hand-rolled parsers will certainly open up some new possibilities for you.</p> <p>Links:</p> <p><a href= "http://craftinginterpreters.com/">http://craftinginterpreters.com/</a>  <a href= "http://gameprogrammingpatterns.com/">http://gameprogrammingpatterns.com/</a>  <a href= "http://journal.stuffwithstuff.com/">http://journal.stuffwithstuff.com/</a></p>]]></content:encoded>
			<enclosure length="55252043" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/032_-_Bob_NyStrom.mp3?dest-id=628353" />
			<itunes:duration>56:06</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Bob Nystrom is the author of Crafting Interpreters. I speak with Nystrom about building a programming language and an interpreter implementation for it. We talk about parsing, the difference between compiler and interpreters and a lot more. If you are...]]></itunes:subtitle>
			<itunes:summary>Bob Nystrom is the author of Crafting Interpreters. I speak with Nystrom about building a programming language and an interpreter implementation for it.  We talk about parsing, the difference between compiler and interpreters and a lot more. </itunes:summary>
			<itunes:episode>32</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Rethinking databases and Noria with Jon Gjengset </title>
			<itunes:title>Rethinking databases and Noria with Jon Gjengset </itunes:title>
			<pubDate>Tue, 30 Apr 2019 09:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[fa86f8b08c9242eab0ac5ea2677e316c]]></guid>
			<link><![CDATA[http://corecursive.com/rethinking-databases-and-noria-with-jon-gjenset]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p>Can we make databases faster and remove the need for caching reads in an external cache? Can we make a distributed SQL based relational database that outperforms memcached? Jon Gjengset and the PDOS team at MIT CSAIL have done just that with Noria.</p> <p>Today I talk to Jon about Noria, about building a database in rust and his efforts to teach people intermediate rust via live coding sessions.</p> <p>Jon was great to talk to. He really was able to explain to me how Noria is able to do what it does and where it is in terms of maturity. The key, besides Rust and evmaps, is that Noria uses materialized views to do query optimization ahead of time, on write. The devil is in the details though, of course. And the details, in this case, are turning declarative SQL into a dataflow program that handles cache updates on new writes.</p> <p><a href= "http://corecursive.com/030-rethinking-databases-with-jon-gjengset/"> http://corecursive.com/030-rethinking-databases-with-jon-gjengset/</a></p> <p><strong>Show notes:</strong></p> <ul> <li><a href="https://github.com/mit-pdos/noria">Noria Project</a></li> <li><a href="https://pdos.csail.mit.edu/">pdos group at MIT</a></li> </ul> <ul> <li><a href= "https://jon.thesquareplanet.com/papers/login-spring19-noria.pdf">Noria Paper</a></li> <li><a href= "https://jon.thesquareplanet.com/papers/login-spring19-noria.pdf">Noria Article</a></li> <li><a href="https://www.youtube.com/c/JonGjengset">Jon's Rust Streaming</a></li> </ul> <p> </p> <p> </p> <p> </p>]]></description>
			<content:encoded><![CDATA[<p>Can we make databases faster and remove the need for caching reads in an external cache? Can we make a distributed SQL based relational database that outperforms memcached? Jon Gjengset and the PDOS team at MIT CSAIL have done just that with Noria.</p> <p>Today I talk to Jon about Noria, about building a database in rust and his efforts to teach people intermediate rust via live coding sessions.</p> <p>Jon was great to talk to. He really was able to explain to me how Noria is able to do what it does and where it is in terms of maturity. The key, besides Rust and evmaps, is that Noria uses materialized views to do query optimization ahead of time, on write. The devil is in the details though, of course. And the details, in this case, are turning declarative SQL into a dataflow program that handles cache updates on new writes.</p> <p><a href= "http://corecursive.com/030-rethinking-databases-with-jon-gjengset/"> http://corecursive.com/030-rethinking-databases-with-jon-gjengset/</a></p> <p>Show notes:</p> <ul> <li><a href="https://github.com/mit-pdos/noria">Noria Project</a></li> <li><a href="https://pdos.csail.mit.edu/">pdos group at MIT</a></li> </ul> <ul> <li><a href= "https://jon.thesquareplanet.com/papers/login-spring19-noria.pdf">Noria Paper</a></li> <li><a href= "https://jon.thesquareplanet.com/papers/login-spring19-noria.pdf">Noria Article</a></li> <li><a href="https://www.youtube.com/c/JonGjengset">Jon's Rust Streaming</a></li> </ul> <p> </p> <p> </p> <p> </p>]]></content:encoded>
			<enclosure length="57780822" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/030_-_Jon_Gjenset.mp3?dest-id=628353" />
			<itunes:duration>58:44</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Can we make databases faster and remove the need for caching reads in an external cache? Can we make a distributed SQL based relational database that outperforms memcached? Jon Gjengset and the PDOS team at MIT CSAIL have done just that with Noria....]]></itunes:subtitle>
			<itunes:summary>Can we make databases faster and remove the need for caching reads in an external cache? Can we make a distributed SQL based relational database that outperforms memcached? Jon Gjengset and the PDOS team at MIT CSAIL have done just that with Noria.</itunes:summary>
			<itunes:episode>30</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Learning to Think with Andy Hunt - Pragmatic Programmers guide to being productive</title>
			<itunes:title>Learning to Think with Andy Hunt - Pragmatic Programmers guide to being productive</itunes:title>
			<pubDate>Mon, 15 Apr 2019 09:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[2dd5baae8a844172a6d513fede693ae2]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/029_-_Andy_Hunt.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p>Andy Hunt is a celebrity in the world of software development. Or at least he is one to me. The Pragmatic Programmer is a classic book on software development book. He is an author of the agile manifesto and started the book company that has published many great books, including several by recent guests.</p> <p>Today I talk to Andy about how software engineers can get better at thinking and learning. How can we develop this meta-skill and how can being aware of common mistakes our brain make us more productive?</p> <p>Show notes:</p> <ul> <li><a href= "https://pragprog.com/book/tpp/the-pragmatic-programmer">The Pragmatic Programmer</a> </li> <li><a href= "https://pragprog.com/book/ahptl/pragmatic-thinking-and-learning">Pragmatic Thinking and Learning </a></li> <li><a href="https://conglommora.com/">Conglommora</a> </li> </ul> <p><a href= "http://corecursive.com/029-learn-to-think-andy-hunt/">Webpage for Episode</a></p> <p> </p>]]></description>
			<content:encoded><![CDATA[<p>Andy Hunt is a celebrity in the world of software development. Or at least he is one to me. The Pragmatic Programmer is a classic book on software development book. He is an author of the agile manifesto and started the book company that has published many great books, including several by recent guests.</p> <p>Today I talk to Andy about how software engineers can get better at thinking and learning. How can we develop this meta-skill and how can being aware of common mistakes our brain make us more productive?</p> <p>Show notes:</p> <ul> <li><a href= "https://pragprog.com/book/tpp/the-pragmatic-programmer">The Pragmatic Programmer</a> </li> <li><a href= "https://pragprog.com/book/ahptl/pragmatic-thinking-and-learning">Pragmatic Thinking and Learning </a></li> <li><a href="https://conglommora.com/">Conglommora</a> </li> </ul> <p><a href= "http://corecursive.com/029-learn-to-think-andy-hunt/">Webpage for Episode</a></p> <p> </p>]]></content:encoded>
			<enclosure length="54051880" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/029_-_Andy_Hunt.mp3?dest-id=628353" />
			<itunes:duration>54:51</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Andy Hunt is a celebrity in the world of software development. Or at least he is one to me. The Pragmatic Programmer is a classic book on software development book. He is an author of the agile manifesto and started the book company that has published...]]></itunes:subtitle>
			<itunes:summary>Andy Hunt is a celebrity in the world of software development.  Or at least he is one to me.  The Pragmatic Programmer is a classic book on software development book.  He is an author of the agile manifesto and started the book company that has published many great books, including several by recent guests.  </itunes:summary>
			<itunes:episode>29</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Data and Scale with Pat Helland - The long view on distributed databases</title>
			<itunes:title>Data and Scale with Pat Helland - The long view on distributed databases</itunes:title>
			<pubDate>Sun, 31 Mar 2019 18:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[3a13b20126424e40880e4c1d3833a876]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/028_-_Pat_Helland.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p>Pat Helland has a wealth of knowledge on building distributed data stores. He has been working on distributed data stores since 1978, when he worked on the tandem fault-tolerant database. Since then he has been involved in many distributed database projects.</p> <p>Here is the key thing, he is also a master at explaining the key ideas of distributed systems using simple language and practical everyday examples. Can you get married on the phone? How are messaging systems and idempotence like regional offices communicating via fax machine? These are the type of metaphor that Pat uses.<br /> Today, Pat sits down with me and teaches me about dealing with data in a distributed, fault tolerant, infinitely scaling world.</p> <p>Webpage : <a href= "https://corecursive.com/?p=960&preview=true" target= "wp-preview-960">http://corecursive.com/<span id= "editable-post-name">028-data-pat-heland</span>/</a></p> <p>Links:</p> <ul> <li><a href="https://muckrack.com/pat-helland/articles">Pat's articles ON ACM QUEUE</a></li> <li><a href= "https://cacm.acm.org/magazines/2018/10/231368-mind-your-state-for-your-state-of-mind/abstract"> Mind your state for your state of mine</a> </li> <li><a href= "https://cacm.acm.org/magazines/2018/8/229763-consistently-eventual/abstract"> Consistency Eventually</a></li> <li><a href= "https://queue.acm.org/detail.cfm?ref=rss&id=2953944">Standing on Distributed Shoulders of Giants</a></li> <li><a href="https://queue.acm.org/detail.cfm?id=2983199">The Singular Success of SQL</a></li> <li><a href="https://queue.acm.org/detail.cfm?id=3025012">Life Beyond Distributed Transactions</a> </li> </ul>]]></description>
			<content:encoded><![CDATA[<p>Pat Helland has a wealth of knowledge on building distributed data stores. He has been working on distributed data stores since 1978, when he worked on the tandem fault-tolerant database. Since then he has been involved in many distributed database projects.</p> <p>Here is the key thing, he is also a master at explaining the key ideas of distributed systems using simple language and practical everyday examples. Can you get married on the phone? How are messaging systems and idempotence like regional offices communicating via fax machine? These are the type of metaphor that Pat uses. Today, Pat sits down with me and teaches me about dealing with data in a distributed, fault tolerant, infinitely scaling world.</p> <p>Webpage : <a href= "https://corecursive.com/?p=960&preview=true" target= "wp-preview-960">http://corecursive.com/028-data-pat-heland/</a></p> <p>Links:</p> <ul> <li><a href="https://muckrack.com/pat-helland/articles">Pat's articles ON ACM QUEUE</a></li> <li><a href= "https://cacm.acm.org/magazines/2018/10/231368-mind-your-state-for-your-state-of-mind/abstract"> Mind your state for your state of mine</a> </li> <li><a href= "https://cacm.acm.org/magazines/2018/8/229763-consistently-eventual/abstract"> Consistency Eventually</a></li> <li><a href= "https://queue.acm.org/detail.cfm?ref=rss&id=2953944">Standing on Distributed Shoulders of Giants</a></li> <li><a href="https://queue.acm.org/detail.cfm?id=2983199">The Singular Success of SQL</a></li> <li><a href="https://queue.acm.org/detail.cfm?id=3025012">Life Beyond Distributed Transactions</a> </li> </ul>]]></content:encoded>
			<enclosure length="55407584" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/028_-_Pat_Helland.mp3?dest-id=628353" />
			<itunes:duration>56:16</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Pat Helland has a wealth of knowledge on building distributed data stores. He has been working on distributed data stores since 1978, when he worked on the tandem fault-tolerant database. Since then he has been involved in many distributed database...]]></itunes:subtitle>
			<itunes:summary>Pat Helland has a wealth of knowledge on building distributed data stores.  He has been working on distributed data stores since 1978, when he wrote code for the tandem fault-tolerant database. Here is the key thing, he is also a master at explaining the key ideas of distributed systems using simple language and practical everyday examples. Today, Pat sits down with me and teaches me about dealing with data in a distributed, fault tolerant, infinitely scaling world.</itunes:summary>
			<itunes:episode>28</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
		</item>
		<item>
			<title>Abstraction and Learning with Runar Bjarnason</title>
			<itunes:title>Abstraction and Learning with Runar Bjarnason</itunes:title>
			<pubDate>Fri, 15 Mar 2019 09:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[d37de0926dc34fac9ea6082bb2edb541]]></guid>
			<link><![CDATA[http://corecursive.com/runar-on-abstraction]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p>What is abstraction?  Can we have a precise definition of abstraction that, once understood, makes writing software simpler?  Runar has thought a lot about abstraction and how we can choose the proper level of abstraction for the software we write.  In this interview, he explains these concepts using examples from the real world, from SQL, from effectful computing and many other areas.</p> <p>We also talk about how to learn and acquire the skills necessary to understand abstract concepts like very polymorphic code and category theory.</p> <p>Runar also explains his latest project unison computing and how it uses the correct level of abstraction to rethink several foundation ideas in software development.</p> <p> </p> <p>Links:</p> <ul> <li><a href= "https://www.youtube.com/watch?v=GqmsQeSzMdw">Constraints Liberate</a></li> <li><a href= "http://blog.higher-order.com/blog/2014/12/21/maximally-powerful/">Maximally Powerful, Minimally Useful</a></li> <li><a href="http://unisonweb.org/posts/">Unison Computing</a></li> </ul> <p><a href= "https://corecursive.com/027-abstraction-with-runar-bjarnason/">Webpage for show</a></p>]]></description>
			<content:encoded><![CDATA[<p>What is abstraction?  Can we have a precise definition of abstraction that, once understood, makes writing software simpler?  Runar has thought a lot about abstraction and how we can choose the proper level of abstraction for the software we write.  In this interview, he explains these concepts using examples from the real world, from SQL, from effectful computing and many other areas.</p> <p>We also talk about how to learn and acquire the skills necessary to understand abstract concepts like very polymorphic code and category theory.</p> <p>Runar also explains his latest project unison computing and how it uses the correct level of abstraction to rethink several foundation ideas in software development.</p> <p> </p> <p>Links:</p> <ul> <li><a href= "https://www.youtube.com/watch?v=GqmsQeSzMdw">Constraints Liberate</a></li> <li><a href= "http://blog.higher-order.com/blog/2014/12/21/maximally-powerful/">Maximally Powerful, Minimally Useful</a></li> <li><a href="http://unisonweb.org/posts/">Unison Computing</a></li> </ul> <p><a href= "https://corecursive.com/027-abstraction-with-runar-bjarnason/">Webpage for show</a></p>]]></content:encoded>
			<enclosure length="48905175" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/027_runar.mp3?dest-id=628353" />
			<itunes:duration>49:29</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[What is abstraction?  Can we have a precise definition of abstraction that, once understood, makes writing software simpler?  Runar has thought a lot about abstraction and how we can choose the proper level of abstraction for the software we...]]></itunes:subtitle>
			<itunes:summary>What is abstraction?  Can we have a precise definition of abstraction that, once understood, makes writing software simpler?  Runar has thought a lot about abstraction and how we can choose the proper level of abstraction for the software we write.  In this interview, he explains these concepts using examples from the real world, from SQL, from effectful computing and many other areas.</itunes:summary>
			<itunes:episode>27</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Modern Systems Programming And Scala Native With Richard Whaling</title>
			<itunes:title>Modern Systems Programming And Scala Native With Richard Whaling</itunes:title>
			<pubDate>Fri, 22 Feb 2019 10:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[5a6200fb8c454b24997779ca54d53417]]></guid>
			<link><![CDATA[http://corecursive.com/modern-systems-programming-and-scala-native-with-richard-whaling]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/4/d/1/b/4d1be154e12327e4/026_-_Scala_Native.jpg" />
			<description><![CDATA[<p>Richard Whaling has an interesting perspective on software development. If you write software for the JVM or if you are interested in low level system programming, or even doing data heavy or network heavy IO programming then you will find this interview interesting.</p> <p>We discuss how to build faster software in a modern fashion by using glibc and techniques from system programming. This means using raw pointers and manual memory management but from a modern language.</p> <p>Richard also shares some perspectives on better utilizing the underlying operating system and how we can build better software by depending on services rather than libraries.</p> <p>Links:</p> <ul> <li><a href="https://beej.us/guide/bgc/">Beej's Guide to C</a></li> <li><a href="http://beej.us/guide/bgipc/">Beej's Guide to Unix Interprocess Communication</a></li> <li><a href="http://beej.us/guide/bgnet/">Beej's Guide to Network Programming</a></li> <li><a href= "https://www.destroyallsoftware.com/screencasts/catalog">Gary Bernhardt's Destroy All Software Screencasts (Web Server from Scratch, Malloc from scratch, shell from scratch)</a></li> <li>Stevens & Rago Systems Programming books: <ul> <li><a href= "https://www.amazon.com/Advanced-Programming-UNIX-Environment-3rd/dp/0321637739"> Advanced Programming UNIX Environment</a></li> <li><a href= "https://www.amazon.com/Unix-Network-Programming-Sockets-Networking/dp/0131411551Sockets"> Unix Network Programming - Sockets</a></li> <li><a href= "https://www.amazon.com/UNIX-Network-Programming-Interprocess-Communications/dp/0130810819"> UNIX Network programming - Interprocess Communication</a></li> </ul> </li> </ul> <p> </p>]]></description>
			<content:encoded><![CDATA[<p>Richard Whaling has an interesting perspective on software development. If you write software for the JVM or if you are interested in low level system programming, or even doing data heavy or network heavy IO programming then you will find this interview interesting.</p> <p>We discuss how to build faster software in a modern fashion by using glibc and techniques from system programming. This means using raw pointers and manual memory management but from a modern language.</p> <p>Richard also shares some perspectives on better utilizing the underlying operating system and how we can build better software by depending on services rather than libraries.</p> <p>Links:</p> <ul> <li><a href="https://beej.us/guide/bgc/">Beej's Guide to C</a></li> <li><a href="http://beej.us/guide/bgipc/">Beej's Guide to Unix Interprocess Communication</a></li> <li><a href="http://beej.us/guide/bgnet/">Beej's Guide to Network Programming</a></li> <li><a href= "https://www.destroyallsoftware.com/screencasts/catalog">Gary Bernhardt's Destroy All Software Screencasts (Web Server from Scratch, Malloc from scratch, shell from scratch)</a></li> <li>Stevens & Rago Systems Programming books: <ul> <li><a href= "https://www.amazon.com/Advanced-Programming-UNIX-Environment-3rd/dp/0321637739"> Advanced Programming UNIX Environment</a></li> <li><a href= "https://www.amazon.com/Unix-Network-Programming-Sockets-Networking/dp/0131411551Sockets"> Unix Network Programming - Sockets</a></li> <li><a href= "https://www.amazon.com/UNIX-Network-Programming-Interprocess-Communications/dp/0130810819"> UNIX Network programming - Interprocess Communication</a></li> </ul> </li> </ul> <p> </p>]]></content:encoded>
			<enclosure length="53174004" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/026_-_Scala_Native.mp3?dest-id=628353" />
			<itunes:duration>53:56</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Richard Whaling has an interesting perspective on software development. If you write software for the JVM or if you are interested in low level system programming, or even doing data heavy or network heavy IO programming then you will find this...]]></itunes:subtitle>
			<itunes:summary>Richard Whaling has an interesting perspective on software development. If you write software for the JVM or if you are interested in low level system programming, or even doing data heavy or network heavy IO programming then you will find this interview interesting.</itunes:summary>
			<itunes:episode>26</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Burn out and recreational coding with Jamis Buck</title>
			<itunes:title>Burn out and recreational coding with Jamis Buck</itunes:title>
			<pubDate>Fri, 25 Jan 2019 10:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[2f06a74335584e4b8c4df2e0dc574a31]]></guid>
			<link><![CDATA[http://corecursive.com/burn-out-and-recreational-coding-with-jamis-buck]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p>A decade ago Jamis Buck was not loving his job. He was an important open source contributor. He worked for the hottest trendiest software company at the time, 37 signals, creator of ruby on rails. He was on top of the world but also he was burnt out.</p> <p>Today Jamis talks about how he overcame burn out. </p> <p>We discuss how his struggle lead him to write a book about generating mazes and another about building a ray tracer. His books are great fun, and all about recreational programming.  You will learn to build things with a focus not on the latest trends in software development and not even a specific programming language. </p> <p>The focus instead is on fun.</p> <p> </p>]]></description>
			<content:encoded><![CDATA[<p>A decade ago Jamis Buck was not loving his job. He was an important open source contributor. He worked for the hottest trendiest software company at the time, 37 signals, creator of ruby on rails. He was on top of the world but also he was burnt out.</p> <p>Today Jamis talks about how he overcame burn out. </p> <p>We discuss how his struggle lead him to write a book about generating mazes and another about building a ray tracer. His books are great fun, and all about recreational programming.  You will learn to build things with a focus not on the latest trends in software development and not even a specific programming language. </p> <p>The focus instead is on fun.</p> <p> </p>]]></content:encoded>
			<enclosure length="49976685" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/025-recreational_programming.mp3?dest-id=628353" />
			<itunes:duration>59:30</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[A decade ago Jamis Buck was not loving his job. He was an important open source contributor. He worked for the hottest trendiest software company at the time, 37 signals, creator of ruby on rails. He was on top of the world but also he was burnt out....]]></itunes:subtitle>
			<itunes:summary>Today Jamis talks about how he overcame burn out. 

We discuss how his struggle lead him to write a book about generating mazes and another about building a ray tracer. His books are great fun, and all about recreational programming.  You will learn to build things with a focus not on the latest trends in software development and not even a specific programming language. 

The focus instead is on fun.</itunes:summary>
			<itunes:episode>25</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Software as a Reflection of Values With Bryan Cantrill</title>
			<itunes:title>Software as a Reflection of Values With Bryan Cantrill</itunes:title>
			<pubDate>Tue, 18 Dec 2018 13:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[683570a7c1aa4636a33751156f7b0073]]></guid>
			<link><![CDATA[http://corecursive.com/software-as-a-reflection-of-values-with-bryan-cantrill]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p>Which operating system is the best? Which programming language is the best? What text editor?</p> <p>Bryan Cantrill, CTO of Joyent says that is the wrong question. Languages, operating systems and communities have to make trade offs and they do that based on their values. So the right language is the one who's values align with you and your projects goals.</p> <p>This simple idea carries a lot of weight and I think has the potential to lift up technical discussions to a higher level of discourse. You will find it to be a helpful frame next time you need to make a technical decision. Bryan is also pretty excited about how the values of the rust community align with his values for system software.</p> <p>Also we cover Oberon, Clean and Simula 4, none of which I've never heard of and how IBM System/370 's Global Trace Facility doesn't hold a candle to Dtrace.</p> <p><a href= "http://corecursive.com/024-software-as-%E2%80%A6h-bryan-cantrill/"> Webpage for this episode</a></p> <p>Show Links:</p> <ul> <li><a href= "https://www.slideshare.net/bcantrill/platform-values-rust-and-the-implications-for-system-software"> Software Values Slides</a></li> <li><a href= "https://www.amazon.ca/dp/0321968972/?coliid=I18SXDJ4KZD0LT&colid=35837B79AK90A&psc=0&ref_=lv_ov_lig_dp_it"> The Design and Implementation of the FreeBSD Operating System</a></li> <li><a href= "https://news.ycombinator.com/item?id=8869401">Microsoft should buy github</a></li> <li><a href="http://dtrace.org/blogs/bmc/2018/02/03/talks/">All Bryan's Talks</a></li> <li><a href= "https://join.slack.com/t/corecursive/shared_invite/enQtNDg2ODIwNzg5MjgwLWIwN2JiZTRjYTYxMTljNzNjYjcxMzg3YmUyZTI2OTE5NmIyYTBkZTk4MjY1MWMxODE3MTIxZmNhYWY3ZDcxN2M"> Slack Channel for Site</a></li> </ul>]]></description>
			<content:encoded><![CDATA[<p>Which operating system is the best? Which programming language is the best? What text editor?</p> <p>Bryan Cantrill, CTO of Joyent says that is the wrong question. Languages, operating systems and communities have to make trade offs and they do that based on their values. So the right language is the one who's values align with you and your projects goals.</p> <p>This simple idea carries a lot of weight and I think has the potential to lift up technical discussions to a higher level of discourse. You will find it to be a helpful frame next time you need to make a technical decision. Bryan is also pretty excited about how the values of the rust community align with his values for system software.</p> <p>Also we cover Oberon, Clean and Simula 4, none of which I've never heard of and how IBM System/370 's Global Trace Facility doesn't hold a candle to Dtrace.</p> <p><a href= "http://corecursive.com/024-software-as-%E2%80%A6h-bryan-cantrill/"> Webpage for this episode</a></p> <p>Show Links:</p> <ul> <li><a href= "https://www.slideshare.net/bcantrill/platform-values-rust-and-the-implications-for-system-software"> Software Values Slides</a></li> <li><a href= "https://www.amazon.ca/dp/0321968972/?coliid=I18SXDJ4KZD0LT&colid=35837B79AK90A&psc=0&ref_=lv_ov_lig_dp_it"> The Design and Implementation of the FreeBSD Operating System</a></li> <li><a href= "https://news.ycombinator.com/item?id=8869401">Microsoft should buy github</a></li> <li><a href="http://dtrace.org/blogs/bmc/2018/02/03/talks/">All Bryan's Talks</a></li> <li><a href= "https://join.slack.com/t/corecursive/shared_invite/enQtNDg2ODIwNzg5MjgwLWIwN2JiZTRjYTYxMTljNzNjYjcxMzg3YmUyZTI2OTE5NmIyYTBkZTk4MjY1MWMxODE3MTIxZmNhYWY3ZDcxN2M"> Slack Channel for Site</a></li> </ul>]]></content:encoded>
			<enclosure length="66603409" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/024_-_Software_Values.mp3?dest-id=628353" />
			<itunes:duration>01:19:04</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Which operating system is the best? Which programming language is the best? What text editor? Bryan Cantrill, CTO of Joyent says that is the wrong question. Languages, operating systems and communities have to make trade offs and they do that based on...]]></itunes:subtitle>
			<itunes:summary>Which operating system is the best? Which programming language is the best? What text editor?

Bryan Cantrill, CTO of Joyent says that is the wrong question. Languages, operating systems and communities have to make trade offs and they do that based on their values. So the right language is the one who's values align with you and your projects goals.</itunes:summary>
			<itunes:episode>24</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>The Little Typer With Daniel Friedman and David Thrane Christiansen</title>
			<itunes:title>The Little Typer With Daniel Friedman and David Thrane Christiansen</itunes:title>
			<pubDate>Sat, 01 Dec 2018 20:42:24 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[96a5f132fab24dd2a9891c076a66e6a3]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/Little_Typer_And_Pie_Language.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p><em>When it comes to type systems "I am, so far, only in the dependent types camp" - Daniel P. Friedman</em></p> <p>You can write more correct software and even rigorous mathematical proofs.  Prepare for some mind stretching.</p> <p>Previous guests like Edwin Brady and Stephanie Weirich have discussed some of the exciting things a dependent type system can do Miles Sabin said dependent types are surely the future. This interview is to get us ready for the future.</p> <p>Daniel P. Friedman is famous for his "Little" series of books. Little Schemer, Little prover, Little MLer and so on. These books are held in high regard.</p> <p>Here is a quote from Doug Crockford:  <em>"Little Schemer teaches one thing, a thing that is very difficult to teach, a thing that every profession programmer should know, and it does it really well. These are lessons that stick with you."</em><br /> The latest one is the little typer and its about types. Specifically dependent types.</p> <p>Dan's coauthor is David Thrane Christiansen, Idris contributor, and host of a podcast about type theory that is way over my head.</p> <p>Together they are going to teach us how the programming skills we already have can be used to develop rigourus mathematical proofs.</p> <p>Stay tuned to the end for my guide to working thru the book.</p> <p>Originally published at CoRecursive <a href= "https://corecursive.com/023-little-typer-and-pie-language/">here</a></p> <p><a href= "https://join.slack.com/t/corecursive/shared_invite/enQtNDg2ODIwNzg5MjgwLWIwN2JiZTRjYTYxMTljNzNjYjcxMzg3YmUyZTI2OTE5NmIyYTBkZTk4MjY1MWMxODE3MTIxZmNhYWY3ZDcxN2M" target="_blank" rel="noopener">Join Our Slack Community</a></p>]]></description>
			<content:encoded><![CDATA[<p><em>When it comes to type systems "I am, so far, only in the dependent types camp" - Daniel P. Friedman</em></p> <p>You can write more correct software and even rigorous mathematical proofs.  Prepare for some mind stretching.</p> <p>Previous guests like Edwin Brady and Stephanie Weirich have discussed some of the exciting things a dependent type system can do Miles Sabin said dependent types are surely the future. This interview is to get us ready for the future.</p> <p>Daniel P. Friedman is famous for his "Little" series of books. Little Schemer, Little prover, Little MLer and so on. These books are held in high regard.</p> <p>Here is a quote from Doug Crockford:  <em>"Little Schemer teaches one thing, a thing that is very difficult to teach, a thing that every profession programmer should know, and it does it really well. These are lessons that stick with you."</em> The latest one is the little typer and its about types. Specifically dependent types.</p> <p>Dan's coauthor is David Thrane Christiansen, Idris contributor, and host of a podcast about type theory that is way over my head.</p> <p>Together they are going to teach us how the programming skills we already have can be used to develop rigourus mathematical proofs.</p> <p>Stay tuned to the end for my guide to working thru the book.</p> <p>Originally published at CoRecursive <a href= "https://corecursive.com/023-little-typer-and-pie-language/">here</a></p> <p><a href= "https://join.slack.com/t/corecursive/shared_invite/enQtNDg2ODIwNzg5MjgwLWIwN2JiZTRjYTYxMTljNzNjYjcxMzg3YmUyZTI2OTE5NmIyYTBkZTk4MjY1MWMxODE3MTIxZmNhYWY3ZDcxN2M" target="_blank" rel="noopener">Join Our Slack Community</a></p>]]></content:encoded>
			<enclosure length="56849809" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/Little_Typer_And_Pie_Language.mp3?dest-id=628353" />
			<itunes:duration>01:07:27</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[When it comes to type systems "I am, so far, only in the dependent types camp" - Daniel P. Friedman You can write more correct software and even rigorous mathematical proofs.  Prepare for some mind stretching. Previous guests like Edwin Brady and...]]></itunes:subtitle>
			<itunes:summary>Daniel P. Friedman is famous for his "Little" series of books. Little Schemer, Little prover, Little MLer and so on. These books are held in high regard.

Dan's coauthor is David Thrane Christiansen, Idris contributor, and host of a podcast about type theory that is way over my head.

Together they are going to teach us how the programming skills we already have can be used to develop rigorous mathematical proofs.</itunes:summary>
			<itunes:episode>23</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>Big Ball Of Mud</title>
			<itunes:title>Big Ball Of Mud – Architecture and Services with Wade Waldron</itunes:title>
			<pubDate>Wed, 14 Nov 2018 13:30:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[ba81d53dec1d419eaf5a400230a583ae]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/Many_Small_Balls_Of_Mud.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p>Evolving software under constrained resources is a challenge, and I think we kid ourselves when we don't admit this. Software that is providing value often grows in scope until it is a mess.  Today I talk to Wade Waldron about how avoid this situation or recover from it.</p> <p>Big ball of mud is the title of a paper presented at the 1997 Patterns Languages of Programs conference and I think it is super interesting.</p> <p>The researchers went out into the field to see what architectures software in industry were following. Big Ball of mud is what they found, along with other 6 other patterns with names like "sweep it under the rug" and reconstruction, which is the throw it away and start again pattern.</p> <p>Links:</p> <ul> <li><a href="http://www.laputan.org/mud/">Big Ball Of Mud Paper</a></li> <li><a href= "https://hackernoon.com/demystifying-the-hexagon-5e58cb57bbda">Hexagonal Architecture</a></li> <li><a href= "https://cognitiveclass.ai/learn/reactive-architecture-foundations/"> Reactive Foundations Course</a></li> <li><a href= "https://cognitiveclass.ai/learn/reactive-architecture-advanced/">Reactive Advanced Course</a></li> </ul> <p>Check out other episodes like this Philip Wadler:</p> <p><a href= "https://corecursive.com/021-gods-programming-language-with-philip-wadler/"> https://corecursive.com/021-gods-programming-language-with-philip-wadler/</a></p> <p>This podcast originally published here :</p> <p><a href= "https://corecursive.com/22-big-ball-of-mud-architecture-and-services-with-wade-waldron/"> https://corecursive.com/22-big-ball-of-mud-architecture-and-services-with-wade-waldron/</a></p>]]></description>
			<content:encoded><![CDATA[<p>Evolving software under constrained resources is a challenge, and I think we kid ourselves when we don't admit this. Software that is providing value often grows in scope until it is a mess.  Today I talk to Wade Waldron about how avoid this situation or recover from it.</p> <p>Big ball of mud is the title of a paper presented at the 1997 Patterns Languages of Programs conference and I think it is super interesting.</p> <p>The researchers went out into the field to see what architectures software in industry were following. Big Ball of mud is what they found, along with other 6 other patterns with names like "sweep it under the rug" and reconstruction, which is the throw it away and start again pattern.</p> <p>Links:</p> <ul> <li><a href="http://www.laputan.org/mud/">Big Ball Of Mud Paper</a></li> <li><a href= "https://hackernoon.com/demystifying-the-hexagon-5e58cb57bbda">Hexagonal Architecture</a></li> <li><a href= "https://cognitiveclass.ai/learn/reactive-architecture-foundations/"> Reactive Foundations Course</a></li> <li><a href= "https://cognitiveclass.ai/learn/reactive-architecture-advanced/">Reactive Advanced Course</a></li> </ul> <p>Check out other episodes like this Philip Wadler:</p> <p><a href= "https://corecursive.com/021-gods-programming-language-with-philip-wadler/"> https://corecursive.com/021-gods-programming-language-with-philip-wadler/</a></p> <p>This podcast originally published here :</p> <p><a href= "https://corecursive.com/22-big-ball-of-mud-architecture-and-services-with-wade-waldron/"> https://corecursive.com/22-big-ball-of-mud-architecture-and-services-with-wade-waldron/</a></p>]]></content:encoded>
			<enclosure length="51295341" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/Many_Small_Balls_Of_Mud.mp3?dest-id=628353" />
			<itunes:duration>01:00:51</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Big Ball Of Mud – Architecture and Services with Wade Waldron]]></itunes:subtitle>
			<itunes:summary>Evolving software under constrained resources is a challenge, and I think we kid ourselves when we don't admit this. Software that is providing value often grows in scope until it is a mess.  Today I talk to Wade Waldron about how avoid this situation or recover from it.</itunes:summary>
			<itunes:episode>22</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
		<item>
			<title>God's Programming Language - Philip Wadler on Haskell </title>
			<itunes:title>God's Programming Language - Philip Wadler on Haskell </itunes:title>
			<pubDate>Mon, 22 Oct 2018 12:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[423e74ad8f4743f9bd92d929a2c402db]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/021_-_Gods_Programming_Language.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p>Today I talk to Professor Philip Wadler, a very accomplished programming language researcher.  Phil walks us through a principle that has guided his career.  That principle is that typed lambda calculus is not invented but a discovery of a deep truth. It is something connected to the mathematical underpinning of the universe itself.</p> <p>It follows from this that functional programming languages are therefore more correct or more deeply justified and fundamental than other languages.  I am probably stating things in a stronger fashion than Phil is comfortable with, but I like fp, so I can be a little hyperbolic.</p> <p>While explaining this principle, that has guided his career, Phil takes us through the history of computer science.  We start with Turing and Alonzo Church.  Eventually we get to what the movie Independence Day got wrong and what language a theoretical creator deity would program in.</p> <h4><strong>Show notes:</strong></h4> <ul> <li><a href= "https://www.youtube.com/watch?v=IOiZatlZtGU">talk</a></li> <li><a href= "http://homepages.inf.ed.ac.uk/wadler/papers/propositions-as-types/propositions-as-types.pdf"> paper</a></li> </ul> <p> </p> <p><a href= "http://corecursive.com/021-gods-programming-language-with-philip-wadler/"> Web page for this episode</a></p> <p><a href="https://twitter.com/corecursive">CoRecursive On Twitter</a></p> <p><a href= "https://itunes.apple.com/ca/podcast/corecursive/id1330329512?ls=1"> CoRecursive On Itunes</a></p>]]></description>
			<content:encoded><![CDATA[<p>Today I talk to Professor Philip Wadler, a very accomplished programming language researcher.  Phil walks us through a principle that has guided his career.  That principle is that typed lambda calculus is not invented but a discovery of a deep truth. It is something connected to the mathematical underpinning of the universe itself.</p> <p>It follows from this that functional programming languages are therefore more correct or more deeply justified and fundamental than other languages.  I am probably stating things in a stronger fashion than Phil is comfortable with, but I like fp, so I can be a little hyperbolic.</p> <p>While explaining this principle, that has guided his career, Phil takes us through the history of computer science.  We start with Turing and Alonzo Church.  Eventually we get to what the movie Independence Day got wrong and what language a theoretical creator deity would program in.</p> Show notes: <ul> <li><a href= "https://www.youtube.com/watch?v=IOiZatlZtGU">talk</a></li> <li><a href= "http://homepages.inf.ed.ac.uk/wadler/papers/propositions-as-types/propositions-as-types.pdf"> paper</a></li> </ul> <p> </p> <p><a href= "http://corecursive.com/021-gods-programming-language-with-philip-wadler/"> Web page for this episode</a></p> <p><a href="https://twitter.com/corecursive">CoRecursive On Twitter</a></p> <p><a href= "https://itunes.apple.com/ca/podcast/corecursive/id1330329512?ls=1"> CoRecursive On Itunes</a></p>]]></content:encoded>
			<enclosure length="51166390" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/021_-_Gods_Programming_Language.mp3?dest-id=628353" />
			<itunes:duration>01:00:53</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Today I talk to Professor Philip Wadler, a very accomplished programming language researcher.  Phil walks us through a principle that has guided his career.  That principle is that typed lambda calculus is not invented but a discovery of a...]]></itunes:subtitle>
			<itunes:summary>Today I talk to Professor Philip Wadler, a very accomplished programming language researcher.  Phil walks us through a principle that has guided his career.  That principle is that typed lambda calculus is not invented but a discovery of a deep truth. It is something connected to the mathematical underpinning of the universe itself.</itunes:summary>
			<itunes:episode>21</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Bell</itunes:author>
		</item>
		<item>
			<title>Test in Production and being On-Call with Charity Majors</title>
			<itunes:title>Test in Production and being On-Call with Charity Majors</itunes:title>
			<pubDate>Fri, 31 Aug 2018 12:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[af57b01faf0841fc982882070ba0af9e]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/019_-_Observabilty.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/3/7/0/2/3702df326e4e4be7/019_-_Observabilty.png" />
			<description><![CDATA[<p>"Metrics and Dashboards can die in a fire and every software engineer should be on-call" - Charity Majors</p> <p>Today's Interview is with Charity Majors. We talk about how to make it easier to debug production issues in today's world of complicated distributed systems.  A warning, There is some explicit language in this interview.</p> <p>I originally saw a talk by Charity where she said something like fuck your metrics and dashboards, you should test in production more. It was a pretty hyperbolic statement, but backed up with a lot of great insights. I think you'll find this interview similarly insightful.</p> <p>Charity and her company are probably best known for popularizing the concept that observability in the key to being able to debug issues in production.</p> <p>Also if you are a talented developer with functional programming skills, I've got a job offer for you. My employer <a href= "https://www.tenable.com/">Tenable</a> is hiring.  Tenable is a pretty great place to work. <a href="https://t.co/y4cPVlVqbo">Here is a job link</a>.</p> <p>Show notes:</p> <ul> <li><a href= "https://www.facebook.com/notes/facebook-engineering/under-the-hood-data-diving-with-scuba/10150599692628920/"> Facebook Scuba</a></li> <li><a href= "https://www.youtube.com/watch?v=1wjovFSCGhE">Observability Talk</a></li> <li><a href= "https://charity.wtf/2017/05/11/the-engineer-manager-pendulum/">the-engineer-manager-pendulum</a></li> <li><a href="https://www.honeycomb.io/">HoneyComb.io</a></li> </ul> <p> </p> <p><a href= "https://corecursive.com/019-test-in-production-with-charity-majors/"> Show Link</a></p>]]></description>
			<content:encoded><![CDATA[<p>"Metrics and Dashboards can die in a fire and every software engineer should be on-call" - Charity Majors</p> <p>Today's Interview is with Charity Majors. We talk about how to make it easier to debug production issues in today's world of complicated distributed systems.  A warning, There is some explicit language in this interview.</p> <p>I originally saw a talk by Charity where she said something like fuck your metrics and dashboards, you should test in production more. It was a pretty hyperbolic statement, but backed up with a lot of great insights. I think you'll find this interview similarly insightful.</p> <p>Charity and her company are probably best known for popularizing the concept that observability in the key to being able to debug issues in production.</p> <p>Also if you are a talented developer with functional programming skills, I've got a job offer for you. My employer <a href= "https://www.tenable.com/">Tenable</a> is hiring.  Tenable is a pretty great place to work. <a href="https://t.co/y4cPVlVqbo">Here is a job link</a>.</p> <p>Show notes:</p> <ul> <li><a href= "https://www.facebook.com/notes/facebook-engineering/under-the-hood-data-diving-with-scuba/10150599692628920/"> Facebook Scuba</a></li> <li><a href= "https://www.youtube.com/watch?v=1wjovFSCGhE">Observability Talk</a></li> <li><a href= "https://charity.wtf/2017/05/11/the-engineer-manager-pendulum/">the-engineer-manager-pendulum</a></li> <li><a href="https://www.honeycomb.io/">HoneyComb.io</a></li> </ul> <p> </p> <p><a href= "https://corecursive.com/019-test-in-production-with-charity-majors/"> Show Link</a></p>]]></content:encoded>
			<enclosure length="40331135" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/019_-_Observabilty.mp3?dest-id=628353" />
			<itunes:duration>47:59</itunes:duration>
			<itunes:explicit>yes</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Metrics and Dashboards can die in a fire and every software engineer should be on-call]]></itunes:subtitle>
			<itunes:summary>Today's Interview is with Charity Majors. We talk about how to make it easier to debug production issues in today's world of complicated distributed systems.  A warning, There is some explicit language in this interview.</itunes:summary>
			<itunes:episode>19</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Bell</itunes:author>
		</item>
		<item>
			<title>Domain Driven Design And Micro Services With Vaughn Vernon</title>
			<itunes:title>Micro Services And Domain Driven Design With Vaughn Vernon</itunes:title>
			<pubDate>Fri, 17 Aug 2018 12:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[cfd2f73646634b45a1ab50bda4f97119]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/018_-_DDDMS.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p>Today I talk to Vaughn Vernon about how Domain Driven Design can help with designing micro services.  The guidelines that Vaughn has developed in his work on DDD can provide guidance for where service and consistency boundaries should be drawn.  We also talk about the platform he is developing for applying these DDD concepts using the actor model, <a href= "https://vlingo.io">Vlingo</a>.</p> <p>Also my group at <a href="https://tenable.com/">Tenable</a> is hiring for our web app scanning product.  We are looking for a talented developer and I think it is really a great place to work.  Security, Scaling, and Performance are some of the challenges that make this an interesting position where a great developer with functional programming skills could really excel.  <a href="http://app.jobvite.com/m?3cBP1kws">Apply here</a> and or hit me up on twitter or email ( adam@corecursive.com ) for further details.</p> <p>Show Notes:</p> <ul> <li><a href= "https://www.amazon.ca/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577"> Implementing DDD Book</a></li> <li><a href="https://vlingo.io/">Vlingo Platform</a></li> <li><a href="https://github.com/vlingo">Vlingo Source</a></li> </ul> <p> </p>]]></description>
			<content:encoded><![CDATA[<p>Today I talk to Vaughn Vernon about how Domain Driven Design can help with designing micro services.  The guidelines that Vaughn has developed in his work on DDD can provide guidance for where service and consistency boundaries should be drawn.  We also talk about the platform he is developing for applying these DDD concepts using the actor model, <a href= "https://vlingo.io">Vlingo</a>.</p> <p>Also my group at <a href="https://tenable.com/">Tenable</a> is hiring for our web app scanning product.  We are looking for a talented developer and I think it is really a great place to work.  Security, Scaling, and Performance are some of the challenges that make this an interesting position where a great developer with functional programming skills could really excel.  <a href="http://app.jobvite.com/m?3cBP1kws">Apply here</a> and or hit me up on twitter or email ( adam@corecursive.com ) for further details.</p> <p>Show Notes:</p> <ul> <li><a href= "https://www.amazon.ca/Implementing-Domain-Driven-Design-Vaughn-Vernon/dp/0321834577"> Implementing DDD Book</a></li> <li><a href="https://vlingo.io/">Vlingo Platform</a></li> <li><a href="https://github.com/vlingo">Vlingo Source</a></li> </ul> <p> </p>]]></content:encoded>
			<enclosure length="41189832" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/018_-_DDDMS.mp3?dest-id=628353" />
			<itunes:duration>49:01</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Today I talk to Vaughn Vernon about how Domain Driven Design can help with designing micro services.  The guidelines that Vaughn has developed in his work on DDD can provide guidance for where service and consistency boundaries should be...]]></itunes:subtitle>
			<itunes:summary>Today I talk to Vaughn Vernon about how Domain Driven Design can help with designing micro services.  The guidelines that Vaughn has developed in his work on DDD can provide guidance for where service and consistency boundaries should be drawn.  We also talk about the platform he is developing for applying these DDD concepts using the actor model, Vlingo.</itunes:summary>
			<itunes:episode>18</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Bell</itunes:author>
		</item>
		<item>
			<title>Http4s  and Functional Web Development With Ross Baker</title>
			<itunes:title>Http4s  and Functional Web Development With Ross Baker</itunes:title>
			<pubDate>Fri, 27 Jul 2018 04:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[66dc8deeb3ec465e84f8e8d96d65e0a4]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/017_-_Http4s.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p>The promise of functional programming is code that is easier to reason about, test and maintain. Referential transparency means there is no extra context to worry about, we can just focus on inputs and outputs. Examples of functional programming in the small are plentiful. Fibonacci is easy to write as a function but what about fp in the large?</p> <p>Http4s is a web framework written in scala that takes a pure functional approach to building http services. Ross Baker is a contributor to http4s and he explains the benefits of this approach. We also touch on the benefits of working remotely, since he and I have both been doing it for some time.</p> <p>Links:</p> <ul> <li><a href="https://http4s.org/">Http4s</a></li> <li><a href= "https://www.youtube.com/watch?v=urdtmx4h5LE">Presentation on Http4s </a></li> </ul> <p>Today I talk with @rossabaker about http4s and the benefits of a pure functional approach to building http services</p>]]></description>
			<content:encoded><![CDATA[<p>The promise of functional programming is code that is easier to reason about, test and maintain. Referential transparency means there is no extra context to worry about, we can just focus on inputs and outputs. Examples of functional programming in the small are plentiful. Fibonacci is easy to write as a function but what about fp in the large?</p> <p>Http4s is a web framework written in scala that takes a pure functional approach to building http services. Ross Baker is a contributor to http4s and he explains the benefits of this approach. We also touch on the benefits of working remotely, since he and I have both been doing it for some time.</p> <p>Links:</p> <ul> <li><a href="https://http4s.org/">Http4s</a></li> <li><a href= "https://www.youtube.com/watch?v=urdtmx4h5LE">Presentation on Http4s </a></li> </ul> <p>Today I talk with @rossabaker about http4s and the benefits of a pure functional approach to building http services</p>]]></content:encoded>
			<enclosure length="42850778" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/017_-_Http4s.mp3?dest-id=628353" />
			<itunes:duration>50:59</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[The promise of functional programming is code that is easier to reason about, test and maintain. Referential transparency means there is no extra context to worry about, we can just focus on inputs and outputs. Examples of functional programming in...]]></itunes:subtitle>
			<itunes:summary>Http4s is a web framework written in scala that takes a pure functional approach to building http services. Ross Baker is a contributor to http4s and he explains the benefits of this approach.</itunes:summary>
			<itunes:episode>17</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Bell</itunes:author>
		</item>
		<item>
			<title>Moves and Borrowing In Rust With Jim Blandy</title>
			<itunes:title>Moves and Borrowing In Rust With Jim Blandy</itunes:title>
			<pubDate>Tue, 03 Jul 2018 04:30:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[21e10cfc986540b2a9827e7c07e03c9f]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/corecursive016.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/7/a/5/d7a5a500931246e3/Coding_Stories.png" />
			<description><![CDATA[<p>The surprising thing about rust is how memory management works.  Rust has the concepts of moves and borrowing.  If you have heard about Rust, you may have heard people talking about the borrow checker and trying to make it happy. In this interview, Jim Blandy walks us through what these concepts mean and how they work.  We also talk about how to avoid fighting with the borrow checker at all and why the conceptual model that Rust adopts, though it may seem unusual at first, is actually more representative of how computers work and therefore an easier programming model.</p>]]></description>
			<content:encoded><![CDATA[<p>The surprising thing about rust is how memory management works.  Rust has the concepts of moves and borrowing.  If you have heard about Rust, you may have heard people talking about the borrow checker and trying to make it happy. In this interview, Jim Blandy walks us through what these concepts mean and how they work.  We also talk about how to avoid fighting with the borrow checker at all and why the conceptual model that Rust adopts, though it may seem unusual at first, is actually more representative of how computers work and therefore an easier programming model.</p>]]></content:encoded>
			<enclosure length="56335926" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/corecursive016.mp3?dest-id=628353" />
			<itunes:duration>01:07:04</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[The surprising thing about rust is how memory management works.  Rust has the concepts of moves and borrowing.  If you have heard about Rust, you may have heard people talking about the borrow checker and trying to make it happy. In this...]]></itunes:subtitle>
			<itunes:summary>The surprising thing about rust is how memory management works.  Rust has the concepts of moves and borrowing.  If you have heard about Rust, you may have heard people talking about the borrow checker and trying to make it happy. In this interview, Jim Blandy walks us through what these concepts mean and how they work. </itunes:summary>
			<itunes:episode>16</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Bell</itunes:author>
		</item>
		<item>
			<title>Dependent Types in Haskell with Stephanie Weirich</title>
			<itunes:title>Dependent Types in Haskell with Stephanie Weirich</itunes:title>
			<pubDate>Wed, 13 Jun 2018 04:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[707f824699524ca4a44af6980b8a481b]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/015_-_Dependant_Haskell.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/2/9/0/2/290296e34399acc8/sweirich-2017-cropped.png" />
			<description><![CDATA[<p>At Strange loop 2017, a wandered into a talk where I saw some code that deeply surprised me. The code could have been python if you squinted, passing dictionaries around, no type annotations anywhere.</p> <p>Yet key look up in the dictionary was validated at compile time. It was a compile time error to access elements that didn't exist. Also the dictionary was heterogeneous, the elements had different types, and it was all inferred and validated at compile time.</p> <p><br /> What I was seeing was Dependent types in Haskell. In today's interview Stephanie Weirich explains her efforts to add dependent types to haskell and how that example worked.</p> <p> </p> <p>Shows Notes:</p> <ul> <li><a href= "https://thestrangeloop.com/2017/dependent-types-in-haskell.html" target="_blank" rel="noopener">Dependent Types in Haskell Talk</a></li> <li><a href= "https://www.cis.upenn.edu/~sweirich/">https://www.cis.upenn.edu/~sweirich/</a></li> <li><a title="Dependant Types in Haskell Talk " href= "https://www.youtube.com/watch?v=wNa3MMbhwS4" target="_blank" rel= "noopener">https://github.com/sweirich</a></li> <li><a href="http://twitter.com/fancytypes">@fancytypes</a></li> <li><a href="https://github.com/sweirich/dth/tree/master/regexp" target="_blank" rel="noopener">Dependent Types Regex</a></li> </ul>]]></description>
			<content:encoded><![CDATA[<p>At Strange loop 2017, a wandered into a talk where I saw some code that deeply surprised me. The code could have been python if you squinted, passing dictionaries around, no type annotations anywhere.</p> <p>Yet key look up in the dictionary was validated at compile time. It was a compile time error to access elements that didn't exist. Also the dictionary was heterogeneous, the elements had different types, and it was all inferred and validated at compile time.</p> <p> What I was seeing was Dependent types in Haskell. In today's interview Stephanie Weirich explains her efforts to add dependent types to haskell and how that example worked.</p> <p> </p> <p>Shows Notes:</p> <ul> <li><a href= "https://thestrangeloop.com/2017/dependent-types-in-haskell.html" target="_blank" rel="noopener">Dependent Types in Haskell Talk</a></li> <li><a href= "https://www.cis.upenn.edu/~sweirich/">https://www.cis.upenn.edu/~sweirich/</a></li> <li><a title="Dependant Types in Haskell Talk " href= "https://www.youtube.com/watch?v=wNa3MMbhwS4" target="_blank" rel= "noopener">https://github.com/sweirich</a></li> <li><a href="http://twitter.com/fancytypes">@fancytypes</a></li> <li><a href="https://github.com/sweirich/dth/tree/master/regexp" target="_blank" rel="noopener">Dependent Types Regex</a></li> </ul>]]></content:encoded>
			<enclosure length="61985023" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/015_-_Dependant_Haskell.mp3?dest-id=628353" />
			<itunes:duration>58:44</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[At Strange loop 2017, a wandered into a talk where I saw some code that deeply surprised me. The code could have been python if you squinted, passing dictionaries around, no type annotations anywhere. Yet key look up in the dictionary was validated at...]]></itunes:subtitle>
			<itunes:summary> In todays interview Stephanie Weirich explains her efforts to make haskell have dependent types and how that example worked.

</itunes:summary>
			<itunes:episode>15</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Bell</itunes:author>
		</item>
		<item>
			<title>Micro Services vs Monoliths With Jan Machacek</title>
			<itunes:title>Micro Services vs Monoliths With Jan Machacek</itunes:title>
			<pubDate>Wed, 06 Jun 2018 04:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[e140d755cf9c40a4830311b9ece0aa64]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/014_-_Distributed_Systems_Design.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/b/e/6/1/be6154a0ed93b5bd/Jan-Machacek.jpg" />
			<description><![CDATA[<p>I don't know a lot about micro services.  Like how to design them and what the various caveats and anti-patterns are.  I'm currently working on a project that involves decomposing a monolithic application into separate parts, integrated together using Kafka and http.  </p> <p>Today I talk to coauthor of upcoming book, Reactive Systems Architecture : Designing and Implementing an Entire Distributed System.  If you want to learn some of the hows and whys of building a distributed system, I think you'll really enjoy this interview.  The insights from this conversation are already helping me.</p> <ul> <li>Contact <ul> <li><span class="name"><a href="twitter.com/@honzam399">Jan Machacek</a> is the CTO at <a href= "https://www.cakesolutions.net/teamblogs/author/jan-machacek">Cake Solutions</a>.</span></li> </ul> </li> <li>Videos <ul> <li><a href= "https://www.youtube.com/watch?v=ZFo_HoQI5iY"><span class= "name">long lived micro services </span></a></li> <li><a href= "https://www.amazon.com/Reactive-Systems-Architecture-Implementing-Distributed/dp/1491980710"> Book - Reactive System Architecture</a></li> </ul> </li> </ul>]]></description>
			<content:encoded><![CDATA[<p>I don't know a lot about micro services.  Like how to design them and what the various caveats and anti-patterns are.  I'm currently working on a project that involves decomposing a monolithic application into separate parts, integrated together using Kafka and http.  </p> <p>Today I talk to coauthor of upcoming book, Reactive Systems Architecture : Designing and Implementing an Entire Distributed System.  If you want to learn some of the hows and whys of building a distributed system, I think you'll really enjoy this interview.  The insights from this conversation are already helping me.</p> <ul> <li>Contact <ul> <li><a href="twitter.com/@honzam399">Jan Machacek</a> is the CTO at <a href= "https://www.cakesolutions.net/teamblogs/author/jan-machacek">Cake Solutions</a>.</li> </ul> </li> <li>Videos <ul> <li><a href= "https://www.youtube.com/watch?v=ZFo_HoQI5iY">long lived micro services </a></li> <li><a href= "https://www.amazon.com/Reactive-Systems-Architecture-Implementing-Distributed/dp/1491980710"> Book - Reactive System Architecture</a></li> </ul> </li> </ul>]]></content:encoded>
			<enclosure length="56043281" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/014_-_Distributed_Systems_Design.mp3?dest-id=628353" />
			<itunes:duration>01:06:33</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[I don't know a lot about micro services.  Like how to design them and what the various caveats and anti-patterns are.  I'm currently working on a project that involves decomposing a monolithic application into separate parts, integrated...]]></itunes:subtitle>
			<itunes:summary>Today I talk to coauthor of upcoming book, Reactive Systems Architecture : Designing and Implementing an Entire Distributed System.  If you want to learn some of the hows and whys of building a distributed system, I think you'll really enjoy this interview.  The insights from this conversation are already helping me.</itunes:summary>
			<itunes:episode>14</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Bell</itunes:author>
		</item>
		<item>
			<title>Rust And Bitter C++ Developers With Jim Blandy</title>
			<itunes:title>Rust And Bitter C++ Developers With Jim Blandy</itunes:title>
			<pubDate>Wed, 16 May 2018 04:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[d9392102d3adf90aeea101fc0a2b854c]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/013_-_Rust.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/7/3/c/7/73c7b28e0bb15a1c/jimb.jpg" />
			<description><![CDATA[<p> Rust, the programming language, seems to be really trendy these days.  Trendy to me means shows up a lot on hacker news.  Rust is really interesting language though, and I think the growing popularity is deserved.  </p> <p>Today I talk with Jim Blandy, one of the authors of Programming Rust.  We talk about w<span class="name" data-wfid= "c8691dd5c4ef">hat problems rust is trying to solve, t</span>he unique language features and type system of rust. It includes both algebraic data types, type classes, and generics.  There is even a proposal somewhere for adding HKT.  We also touch on why it is so hard to secure code. Jim works on Firefox and his insights into the difficulty of writing secure code are super interesting.</p> <p><span class="name" data-wfid="bcf558864159">Show notes</span></p> <ul> <li><a href="https://www.rust-lang.org/en-US/">Rust</a></li> <li><a title="Programming Rust Book" href= "http://shop.oreilly.com/product/0636920040385.do">Programming Rust Book</a></li> <li><a href="https://en.wikipedia.org/wiki/MESI_protocol">MESI protocol</a></li> <li> <a href= "https://link.springer.com/article/10.1023/A:1026276129010">Constraint-based Verification of Parameterized Cache Coherence Protocols Formal Methods in System Design</a></li> <li><span class="name"><a href= "https://plv.mpi-sws.org/rustbelt/">Rust Validation</a>  - </span></li> <li><span class="name">3d game demo - (not sure where this is, post in comments if you find it)</span></li> <li><a href= "https://security.googleblog.com/2007/10/auditing-open-source-software.html"> <span class="name">integer overflow </span></a></li> </ul>]]></description>
			<content:encoded><![CDATA[<p> Rust, the programming language, seems to be really trendy these days.  Trendy to me means shows up a lot on hacker news.  Rust is really interesting language though, and I think the growing popularity is deserved.  </p> <p>Today I talk with Jim Blandy, one of the authors of Programming Rust.  We talk about what problems rust is trying to solve, the unique language features and type system of rust. It includes both algebraic data types, type classes, and generics.  There is even a proposal somewhere for adding HKT.  We also touch on why it is so hard to secure code. Jim works on Firefox and his insights into the difficulty of writing secure code are super interesting.</p> <p>Show notes</p> <ul> <li><a href="https://www.rust-lang.org/en-US/">Rust</a></li> <li><a title="Programming Rust Book" href= "http://shop.oreilly.com/product/0636920040385.do">Programming Rust Book</a></li> <li><a href="https://en.wikipedia.org/wiki/MESI_protocol">MESI protocol</a></li> <li> <a href= "https://link.springer.com/article/10.1023/A:1026276129010">Constraint-based Verification of Parameterized Cache Coherence Protocols Formal Methods in System Design</a></li> <li><a href= "https://plv.mpi-sws.org/rustbelt/">Rust Validation</a>  - </li> <li>3d game demo - (not sure where this is, post in comments if you find it)</li> <li><a href= "https://security.googleblog.com/2007/10/auditing-open-source-software.html"> integer overflow </a></li> </ul>]]></content:encoded>
			<enclosure length="52832822" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/013_-_Rust.mp3?dest-id=628353" />
			<itunes:duration>01:02:53</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[ Rust, the programming language, seems to be really trendy these days.  Trendy to me means shows up a lot on hacker news.  Rust is really interesting language though, and I think the growing popularity is deserved.   Today I...]]></itunes:subtitle>
			<itunes:summary> Rust, the programming language, seems to be really trendy these days.  Trendy to me means shows up a lot on hacker news.  Rust is really interesting language though, and I think the growing popularity is deserved.  
Today I talk with Jim Blandy, one of the authors of Programming Rust.  We talk about what problems rust is trying to solve, the unique language features and type system of rust. It includes both algebraic data types, type classes, and generics. </itunes:summary>
			<itunes:episode>13</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Bell</itunes:author>
		</item>
		<item>
			<title>Erlang And Distributed Systems with Steven Proctor</title>
			<itunes:title>Erlang And Distributed Systems with Steven Proctor</itunes:title>
			<pubDate>Wed, 02 May 2018 04:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[5d78de07ea6953e8b635af2732a59be6]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/012_-_Erlang.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/6/4/a/5/64a57a6a3bb42277/9ad4e9db75bec17539f5e5757112cfa2." />
			<description><![CDATA[<p>Today's interview is with Steven Proctor, the host of the functional geekery podcast.  We talk about distributed programming in general and specifically how erlang supports distributed computing.  We also talk about things he's learned about functional programming and applying FP principles to various non FP contexts.  </p> <p>Contact Proctor:</p> <ul> <li><a href="https://www.functionalgeekery.com/" target="_blank" rel="noopener"><span class="name" data-wfid= "a095be1d59bb">Functional Geekery Podcast</span></a></li> <li><a href="https://twitter.com/stevenproctor" target="_blank" rel="noopener"><span class="name" data-wfid= "939c8965aef5">@stevenproctor</span></a></li> <li><a href="https://twitter.com/fngeekery">@fngeekery</a></li> </ul>]]></description>
			<content:encoded><![CDATA[<p>Today's interview is with Steven Proctor, the host of the functional geekery podcast.  We talk about distributed programming in general and specifically how erlang supports distributed computing.  We also talk about things he's learned about functional programming and applying FP principles to various non FP contexts.  </p> <p>Contact Proctor:</p> <ul> <li><a href="https://www.functionalgeekery.com/" target="_blank" rel="noopener">Functional Geekery Podcast</a></li> <li><a href="https://twitter.com/stevenproctor" target="_blank" rel="noopener">@stevenproctor</a></li> <li><a href="https://twitter.com/fngeekery">@fngeekery</a></li> </ul>]]></content:encoded>
			<enclosure length="51630134" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/012_-_Erlang.mp3?dest-id=628353" />
			<itunes:duration>01:01:26</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Today's interview is with Steven Proctor, the host of the functional geekery podcast.  We talk about distributed programming in general and specifically how erlang supports distributed computing.  We also talk about things he's learned about...]]></itunes:subtitle>
			<itunes:summary>Today's interview is with Steven Proctor, the host of the functional geekery podcast.  We talk about distributed programming in general and specifically how erlang supports distributed computing.  We also talk about things he's learned about functional programming and applying FP principles to various non FP contexts.</itunes:summary>
			<itunes:episode>12</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Bell</itunes:author>
		</item>
		<item>
			<title>Purescript And Avocados with Justin Woo</title>
			<itunes:title>Purescript And Avocados with Justin Woo </itunes:title>
			<pubDate>Wed, 04 Apr 2018 04:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[63046b0fb006a6e17ddc0ef1c0f91ba2]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/010-purescript.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/0/e/b/e/0ebef1ee310cfc7a/F6qMh2MM_400x400.jpg" />
			<description><![CDATA[<p>Purescript is a functional programming language that compiles to javascript.  It is a strict haskell dialect that can run anywhere that javascript does.</p> <p>Justin Woo is a self described Purescript evangelist and enthusiast. We talk about purescript vs elm and working with expressive type systems.  Justin also had some great metaphors about phantom types and masking tape as well as avacados and testing.  </p> <p>Contact Justin:</p> <ul> <li><a href="https://twitter.com/jusrin00" target="_blank" rel= "noopener">twitter</a></li> <li><a href="https://github.com/justinwoo" target="_blank" rel= "noopener">github</a></li> <li><a href="https://justinwoo.github.io/" target="_blank" rel= "noopener">website</a></li> </ul> <p>Show notes:</p> <ul> <li><a href="http://www.purescript.org/" target="_blank" rel= "noopener">Purescript</a></li> <li><a href="egghead.io">purescript training videos</a></li> </ul> <p> </p> <hr /> <p> </p> <p>My team at Tenable is hiring.  We are a distributed team of scala developers working on static analysis of docker containers (among other things).</p> <p>We are a team of smart people, working fairly autonomously on interesting problems.  We are one of many teams working on interesting problems at <a href= "https://www.tenable.com/careers" target="_blank" rel= "noopener">Tenable</a>.  I think its a great place to work.</p> <p>I am in Peterborough, in Canada, and our team has people working in the US, Ireland and the UK as well.</p> <p>Here is the job posting: </p> <p><a href= "https://www.linkedin.com/jobs/view/586241797/">https://www.linkedin.com/jobs/view/586241797/</a></p> <p>Tell them Adam sent you, or you can email me directly at work abell at tenable.com or <a href= "http://jobs.jobvite.com/careers/tenable-network-security/job/ovU56fwk?__jvst=JobBoard&__jvsd=AddThis#/.WrK3JxZ63jE.gmail" target="_blank" rel="noopener">use this link to apply</a>.</p>]]></description>
			<content:encoded><![CDATA[<p>Purescript is a functional programming language that compiles to javascript.  It is a strict haskell dialect that can run anywhere that javascript does.</p> <p>Justin Woo is a self described Purescript evangelist and enthusiast. We talk about purescript vs elm and working with expressive type systems.  Justin also had some great metaphors about phantom types and masking tape as well as avacados and testing.  </p> <p>Contact Justin:</p> <ul> <li><a href="https://twitter.com/jusrin00" target="_blank" rel= "noopener">twitter</a></li> <li><a href="https://github.com/justinwoo" target="_blank" rel= "noopener">github</a></li> <li><a href="https://justinwoo.github.io/" target="_blank" rel= "noopener">website</a></li> </ul> <p>Show notes:</p> <ul> <li><a href="http://www.purescript.org/" target="_blank" rel= "noopener">Purescript</a></li> <li><a href="egghead.io">purescript training videos</a></li> </ul> <p> </p>  <p> </p> <p>My team at Tenable is hiring.  We are a distributed team of scala developers working on static analysis of docker containers (among other things).</p> <p>We are a team of smart people, working fairly autonomously on interesting problems.  We are one of many teams working on interesting problems at <a href= "https://www.tenable.com/careers" target="_blank" rel= "noopener">Tenable</a>.  I think its a great place to work.</p> <p>I am in Peterborough, in Canada, and our team has people working in the US, Ireland and the UK as well.</p> <p>Here is the job posting: </p> <p><a href= "https://www.linkedin.com/jobs/view/586241797/">https://www.linkedin.com/jobs/view/586241797/</a></p> <p>Tell them Adam sent you, or you can email me directly at work abell at tenable.com or <a href= "http://jobs.jobvite.com/careers/tenable-network-security/job/ovU56fwk?__jvst=JobBoard&__jvsd=AddThis#/.WrK3JxZ63jE.gmail" target="_blank" rel="noopener">use this link to apply</a>.</p>]]></content:encoded>
			<enclosure length="42917332" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/010-purescript.mp3?dest-id=628353" />
			<itunes:duration>51:06</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Purescript is a functional programming language that compiles to javascript.  It is a strict haskell dialect that can run anywhere that javascript does. Justin Woo is a self described Purescript evangelist and enthusiast. We talk about purescript...]]></itunes:subtitle>
			<itunes:summary>Purescript is a functional programming language that compiles to javascript.  It is a strict haskell dialect that can run anywhere that javascript does.

Justin Woo is a Purescript evangelist and enthusiast. We talk about purescript vs elm and working with expressive type systems.  Justin also had some great metaphors about phantom types and masking tape as well as avocados and testing.  </itunes:summary>
			<itunes:episode>10</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
		</item>
		<item>
			<title>Throw Away the Irrelevant with John A De Goes</title>
			<itunes:title>Throw Away the Irrelevant with John A De Goes</itunes:title>
			<pubDate>Wed, 21 Mar 2018 04:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[d883fe4f0af3106e11d70e3dfeab3945]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/009-de-goes.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/4/9/9/9/4999412456e6cd51/MUgDLY8K_400x400.jpg" />
			<description><![CDATA[<p> </p> <p>Today's interview is with John A De Goes. We talk about performance problems with monad transformer on the jvm, various flavours of IO monads and reasoning about polymorphic type signatures.  On the lighter side of things, we discuss how to write technical articles well, flame wars and Zee vs Zed pronunciation.</p> <hr /> <p> </p> <p>My team at Tenable is hiring.  We are a distributed team of scala developers working on static analysis of docker containers (among other things).</p> <p>We are a team of smart people, working fairly autonomously on interesting problems.  We are one of many teams working on interesting problems at <a href= "https://www.tenable.com/careers" target="_blank" rel= "noopener">Tenable</a>.  I think its a great place to work.</p> <p>I am in Peterborough, in Canada, and our team has people working in the US, Ireland and the UK as well.</p> <p>Here is the job posting: </p> <p><a href= "https://www.linkedin.com/jobs/view/586241797/">https://www.linkedin.com/jobs/view/586241797/</a></p> <p>Tell them Adam sent you, or you can email me directly at work abell at tenable.com or <a href= "http://jobs.jobvite.com/careers/tenable-network-security/job/ovU56fwk?__jvst=JobBoard&__jvsd=AddThis#/.WrK3JxZ63jE.gmail" target="_blank" rel="noopener">use this link to apply</a>.</p> <hr /> <p> </p> <p>Show Notes:</p> <ul> <li>John's <a href="http://degoes.net/">Website</a> and <a href= "https://twitter.com/jdegoes">Twitter</a></li> <li><a href="http://degoes.net/articles/insufficiently-polymorphic" target="_blank" rel="noopener">Descriptive Variable Names: A Code Smell</a></li> <li><a href="http://degoes.net/articles/kill-data" target="_blank" rel="noopener">Data Structures Are Antithetical to Functional Programming</a></li> <li><a href="http://degoes.net/articles/modern-fp" target="_blank" rel="noopener">A Modern Architecture for FP</a></li> </ul>]]></description>
			<content:encoded><![CDATA[<p> </p> <p>Today's interview is with John A De Goes. We talk about performance problems with monad transformer on the jvm, various flavours of IO monads and reasoning about polymorphic type signatures.  On the lighter side of things, we discuss how to write technical articles well, flame wars and Zee vs Zed pronunciation.</p>  <p> </p> <p>My team at Tenable is hiring.  We are a distributed team of scala developers working on static analysis of docker containers (among other things).</p> <p>We are a team of smart people, working fairly autonomously on interesting problems.  We are one of many teams working on interesting problems at <a href= "https://www.tenable.com/careers" target="_blank" rel= "noopener">Tenable</a>.  I think its a great place to work.</p> <p>I am in Peterborough, in Canada, and our team has people working in the US, Ireland and the UK as well.</p> <p>Here is the job posting: </p> <p><a href= "https://www.linkedin.com/jobs/view/586241797/">https://www.linkedin.com/jobs/view/586241797/</a></p> <p>Tell them Adam sent you, or you can email me directly at work abell at tenable.com or <a href= "http://jobs.jobvite.com/careers/tenable-network-security/job/ovU56fwk?__jvst=JobBoard&__jvsd=AddThis#/.WrK3JxZ63jE.gmail" target="_blank" rel="noopener">use this link to apply</a>.</p>  <p> </p> <p>Show Notes:</p> <ul> <li>John's <a href="http://degoes.net/">Website</a> and <a href= "https://twitter.com/jdegoes">Twitter</a></li> <li><a href="http://degoes.net/articles/insufficiently-polymorphic" target="_blank" rel="noopener">Descriptive Variable Names: A Code Smell</a></li> <li><a href="http://degoes.net/articles/kill-data" target="_blank" rel="noopener">Data Structures Are Antithetical to Functional Programming</a></li> <li><a href="http://degoes.net/articles/modern-fp" target="_blank" rel="noopener">A Modern Architecture for FP</a></li> </ul>]]></content:encoded>
			<enclosure length="57485073" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/009-de-goes.mp3?dest-id=628353" />
			<itunes:duration>01:08:24</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[  Today's interview is with John A De Goes. We talk about performance problems with monad transformer on the jvm, various flavours of IO monads and reasoning about polymorphic type signatures.  On the lighter side of things, we discuss how...]]></itunes:subtitle>
			<itunes:summary>Today's interview is with John A De Goes. We talk about performance problems with monad transformer on the jvm, various flavours of IO monads, reasoning about polymorphic type signatures and much more.</itunes:summary>
			<itunes:episode>9</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Bell</itunes:author>
		</item>
		<item>
			<title>Total Programming Using Swift with Andre Videla</title>
			<itunes:title>Total Programming Using Swift with Andre Videla</itunes:title>
			<pubDate>Mon, 12 Feb 2018 05:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[703947d77d3227df570a661a68a2a88d]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/007-swift.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/8/0/0/f/800f9ccc82a60111/0VtUoNKp8vwskRnGn.jpg" />
			<description><![CDATA[<p><span style="font-weight: 400;">In simple terms, a total function is a function that produces a well defined output for all possible inputs.  A total program is a program composed of only total functions.  </span></p> <p><span style="font-weight: 400;">A non-total, or partial function, would be a function that can fail given certain inputs.  Such as taking the head of a list, which can fail if giving an empty list and is therefore non-total.</span></p> <p><span style="font-weight: 400;">Total programming can be done in any language, however many languages make this easier.  Some, going so far as to require proof of totality.</span></p> <p><span style="font-weight: 400;">In this interview Andre Videla discusses how the swift program language encourages programming in a total style.  He also discusses his love of Idris, proof assistants and how his research into haskell, idris and dependant types have made him a better swift programmer.</span></p> <p> </p> <p><span style="font-weight: 400;">Links:</span></p> <p><span style="font-weight: 400;"><a href= "https://medium.com/@andre_videla/total-programming-in-swift-526508c12a74" target="_blank" rel="noopener">Total Programming In Swift</a></span></p> <p> </p>]]></description>
			<content:encoded><![CDATA[<p>In simple terms, a total function is a function that produces a well defined output for all possible inputs.  A total program is a program composed of only total functions.  </p> <p>A non-total, or partial function, would be a function that can fail given certain inputs.  Such as taking the head of a list, which can fail if giving an empty list and is therefore non-total.</p> <p>Total programming can be done in any language, however many languages make this easier.  Some, going so far as to require proof of totality.</p> <p>In this interview Andre Videla discusses how the swift program language encourages programming in a total style.  He also discusses his love of Idris, proof assistants and how his research into haskell, idris and dependant types have made him a better swift programmer.</p> <p> </p> <p>Links:</p> <p><a href= "https://medium.com/@andre_videla/total-programming-in-swift-526508c12a74" target="_blank" rel="noopener">Total Programming In Swift</a></p> <p> </p>]]></content:encoded>
			<enclosure length="45312858" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/007-swift.mp3?dest-id=628353" />
			<itunes:duration>53:56</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[In simple terms, a total function is a function that produces a well defined output for all possible inputs.  A total program is a program composed of only total functions.   A non-total, or partial function, would be a function that can...]]></itunes:subtitle>
			<itunes:summary>In this interview Andre Videla discusses how the swift program language encourages programming in a total style.  He also discusses his love of Idris, proof assistants and how his research into haskell, idris and dependant types have made him a better swift programmer.

</itunes:summary>
			<itunes:episode>7</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Bell</itunes:author>
		</item>
		<item>
			<title>Type Driven Development and Idris With Edwin Brady</title>
			<itunes:title>Type Driven Development and Idris With Edwin Brady</itunes:title>
			<pubDate>Mon, 29 Jan 2018 05:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[6624999330ba52928013b4c92029582f]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/006_Idris.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/e/b/b/9/ebb95fd54253b0b4/Screen_Shot_2018-01-29_at_7.16.21_PM.png" />
			<description><![CDATA[<p>Edwin Brady is the creator of the Idris programming language and Author of the book Type-Driven Development with Idris and a computer science lecturer.  The book, the language and Edwin himself all seem to be chock full of ideas for improving the way computer programming is done, by applying ideas from programming language theory.  </p> <p>In this interview, we discuss dependent types, type holes, interactive and type-driven development, theorem provers, Curry–Howard correspondence, dependant haskell, total functional programming, British vs American spelling and much more.  </p> <p> </p> <p>Links:</p> <ul> <li><a href= "https://www.manning.com/books/type-driven-development-with-idris">The Book</a></li> <li><a href= "https://www.youtube.com/watch?v=zSsCLnLS1hg&list=PL0DsGHMPLUWUb4XCq9KGoQes-n4GuxtYH"> Idris Lectures at OPLSS</a></li> <li><a href="https://www.idris-lang.org/">Idris Language Site</a></li> </ul>]]></description>
			<content:encoded><![CDATA[<p>Edwin Brady is the creator of the Idris programming language and Author of the book Type-Driven Development with Idris and a computer science lecturer.  The book, the language and Edwin himself all seem to be chock full of ideas for improving the way computer programming is done, by applying ideas from programming language theory.  </p> <p>In this interview, we discuss dependent types, type holes, interactive and type-driven development, theorem provers, Curry–Howard correspondence, dependant haskell, total functional programming, British vs American spelling and much more.  </p> <p> </p> <p>Links:</p> <ul> <li><a href= "https://www.manning.com/books/type-driven-development-with-idris">The Book</a></li> <li><a href= "https://www.youtube.com/watch?v=zSsCLnLS1hg&list=PL0DsGHMPLUWUb4XCq9KGoQes-n4GuxtYH"> Idris Lectures at OPLSS</a></li> <li><a href="https://www.idris-lang.org/">Idris Language Site</a></li> </ul>]]></content:encoded>
			<enclosure length="50100936" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/006_Idris.mp3?dest-id=628353" />
			<itunes:duration>59:37</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Edwin Brady is the creator of the Idris programming language and Author of the book Type-Driven Development with Idris and a computer science lecturer.  The book, the language and Edwin himself all seem to be chock full of ideas for improving the...]]></itunes:subtitle>
			<itunes:summary>Edwin Brady is the creator of the Idris programming language and Author of the book Type-Driven Development with Idris and a computer science lecturer.  
In this interview, we discuss dependent types, type holes, interactive and type-driven development, theorem provers, Curry–Howard correspondence, dependant haskell, total functional programming, British vs American spelling and much more.  </itunes:summary>
			<itunes:episode>6</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Bell</itunes:author>
		</item>
		<item>
			<title>Algebraic Domain Modeling using Functions With Debashish Ghosh</title>
			<itunes:title>Algebraic Domain Modelling using Functions With Debashish Ghosh</itunes:title>
			<pubDate>Mon, 22 Jan 2018 06:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[2c8abbeb476b833b982701846567d375]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/005_FP_Domain_Model.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/d/6/4/8/d648fc8b4dc4fbf1/29424d5.jpg" />
			<description><![CDATA[<p><span style="font-weight: 400;">In object oriented languages, modeling a complex problem domain is a well understood process.  Books like Domain Driven Design contain techniques for breaking down a problem domain and earlier books like the gang of four book catalogue design patterns for modeling these domains in an object oriented way.</span></p> <p><span style="font-weight: 400;">In today’s interview Debashish Ghosh explains how to model a complex problem domain in a functional paradigm.  His solution focuses on modelling the behaviour of the software system rather than nouns it will contain.  He also focuses on an algebraic approach to api design and discusses how abstract algebra provides tools for building better software.</span></p> <p><span style="font-weight: 400;"><a href= "https://corecursive.com/005-algebraic-domain-modelling-using-functions-with-debashish-ghosh/" target="_blank" rel="noopener">Episode Page</a></span></p> <p><a href= "https://corecursive.com/005-algebraic-domain-modeling-using-functions-with-debashish-ghosh/" target="_blank" rel="noopener">Episode Transcript</a></p> <p><span style="font-weight: 400;">“I first come up with what I call the algebra of the behaviors. The algebra of the behaviors refers to the basic contract, which the behavior is supposed to support, which the behavior is supposed to honor. So that's the algebra.” -Debashish Ghosh</span></p> <p><strong>Links:</strong></p> <p><a href= "https://www.manning.com/books/functional-and-reactive-domain-modeling" target="_blank" rel="noopener noreferrer">Debashish's Book</a></p>]]></description>
			<content:encoded><![CDATA[<p>In object oriented languages, modeling a complex problem domain is a well understood process.  Books like Domain Driven Design contain techniques for breaking down a problem domain and earlier books like the gang of four book catalogue design patterns for modeling these domains in an object oriented way.</p> <p>In today’s interview Debashish Ghosh explains how to model a complex problem domain in a functional paradigm.  His solution focuses on modelling the behaviour of the software system rather than nouns it will contain.  He also focuses on an algebraic approach to api design and discusses how abstract algebra provides tools for building better software.</p> <p><a href= "https://corecursive.com/005-algebraic-domain-modelling-using-functions-with-debashish-ghosh/" target="_blank" rel="noopener">Episode Page</a></p> <p><a href= "https://corecursive.com/005-algebraic-domain-modeling-using-functions-with-debashish-ghosh/" target="_blank" rel="noopener">Episode Transcript</a></p> <p>“I first come up with what I call the algebra of the behaviors. The algebra of the behaviors refers to the basic contract, which the behavior is supposed to support, which the behavior is supposed to honor. So that's the algebra.” -Debashish Ghosh</p> <p>Links:</p> <p><a href= "https://www.manning.com/books/functional-and-reactive-domain-modeling" target="_blank" rel="noopener noreferrer">Debashish's Book</a></p>]]></content:encoded>
			<enclosure length="84856499" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/005_FP_Domain_Model.mp3?dest-id=628353" />
			<itunes:duration>58:56</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[In object oriented languages, modeling a complex problem domain is a well understood process.  Books like Domain Driven Design contain techniques for breaking down a problem domain and earlier books like the gang of four book catalogue design...]]></itunes:subtitle>
			<itunes:summary>In today’s interview Debashish Ghosh explains how to model a complex problem domain in a functional paradigm.  His solution focuses on modelling the behaviour of the software system rather than nouns it will contain.  He also focuses on an algebraic approach to api design and discusses how abstract algebra provides tools for building better software.</itunes:summary>
			<itunes:episode>5</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Bell</itunes:author>
		</item>
		<item>
			<title>Python to Scala rewrite at Duolingo with Andre Kenji Horie</title>
			<itunes:title>Scala at Duolingo with Andre Kenji Horie</itunes:title>
			<pubDate>Sun, 07 Jan 2018 22:08:09 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[435f257ecbb98a964417ad7692be0dd9]]></guid>
			<link><![CDATA[https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/003_Scala_At_Doulingo.mp3]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/c/e/5/5/ce553ab68b8d2935/1bf5164.jpg" />
			<description><![CDATA[<p><span style="font-weight: 400;">Doulingo is a language learning platform with over 200 million users.  On a daily basis millions of users receive customized language lessons targeted specifically to them.  These lessons are generated by a system called the session generator.  </span></p> <p><span style="font-weight: 400;">Andre Kenji Horie is senior engineer at Doulingo.  He wrote about the process of rewriting the session generator, as well as moving from python to scala.  and changing architecture all at the same time.</span></p> <p><span style="font-weight: 400;">In this episode Andre talks about the reasons for the rewrite, what drove them to move to scala and the experience of moving from one technology stack to another.</span></p> <p> </p> <p><span style="font-weight: 400;">Show Notes:</span></p> <p><a href= "http://making.duolingo.com/rewriting-duolingos-engine-in-scala"><span style="font-weight: 400;"> Rewriting Doulingo's Engine in Scala</span></a></p> <p><a href="https://www.duolingo.com/jobs"><span style= "font-weight: 400;">Jobs at DouLingo</span></a></p>]]></description>
			<content:encoded><![CDATA[<p>Doulingo is a language learning platform with over 200 million users.  On a daily basis millions of users receive customized language lessons targeted specifically to them.  These lessons are generated by a system called the session generator.  </p> <p>Andre Kenji Horie is senior engineer at Doulingo.  He wrote about the process of rewriting the session generator, as well as moving from python to scala.  and changing architecture all at the same time.</p> <p>In this episode Andre talks about the reasons for the rewrite, what drove them to move to scala and the experience of moving from one technology stack to another.</p> <p> </p> <p>Show Notes:</p> <p><a href= "http://making.duolingo.com/rewriting-duolingos-engine-in-scala"> Rewriting Doulingo's Engine in Scala</a></p> <p><a href="https://www.duolingo.com/jobs">Jobs at DouLingo</a></p>]]></content:encoded>
			<enclosure length="44757541" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/003_Scala_At_Doulingo.mp3?dest-id=628353" />
			<itunes:duration>53:17</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[Doulingo is a language learning platform with over 200 million users.  On a daily basis millions of users receive customized language lessons targeted specifically to them.  These lessons are generated by a system called the session...]]></itunes:subtitle>
			<itunes:summary>Andre Kenji Horie is senior engineer at Doulingo.  He wrote about the process of rewriting the session generator, as well as moving from python to scala.  and changing architecture all at the same time.

In this episode Andre talks about the reasons for the rewrite, what drove them to move to scala and the experience of moving from one technology stack to another.</itunes:summary>
			<itunes:episode>3</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Bell</itunes:author>
		</item>
		<item>
			<title>Incident Response with Emil Stolarsky</title>
			<itunes:title>Incident Response with Emil Stolarsky</itunes:title>
			<pubDate>Fri, 05 Jan 2018 10:00:00 +0000</pubDate>
			<guid isPermaLink="false"><![CDATA[d86d555eab12b2a4968c9f099dd58bfe]]></guid>
			<link><![CDATA[http://corecursive.com/002-incident-response-with-emil-stolarsky]]></link>
			<itunes:image href="https://ssl-static.libsyn.com/p/assets/0/7/0/b/070bbaba666feb02/XX1Li7gq.jpg" />
			<description><![CDATA[<p>As a system becomes more complex, the chance of failure increases. At a large enough scale, failures are inevitable. Incident response is the practice of preparing for and effectively recovering from these failures.</p> <p>An engineering team can use checklists and runbooks to minimize failures. They can put a plan in place for responding to failures. And they can use the process of post mortems to reflect on a failure and take full advantage of the lessons of that failure.</p> <p>Emil Stolarsky is a production engineer at Shopify where his role shares many similarities with that of Google’s site reliability engineers. In this episode, Emil argues that the academic study of emergency management and industries such as aerospace and transportation have a lot to teach software engineers about responding to production problems.  </p> <p>In this interview Emil argues that we need to move beyond tribal knowledge and incorporate practices such as an incident command system and rigorous use of checklists. Emil suggests that we need to move beyond a mindset of “move fast and break things” and toward a place of more deliberate preparation.</p>]]></description>
			<content:encoded><![CDATA[<p>As a system becomes more complex, the chance of failure increases. At a large enough scale, failures are inevitable. Incident response is the practice of preparing for and effectively recovering from these failures.</p> <p>An engineering team can use checklists and runbooks to minimize failures. They can put a plan in place for responding to failures. And they can use the process of post mortems to reflect on a failure and take full advantage of the lessons of that failure.</p> <p>Emil Stolarsky is a production engineer at Shopify where his role shares many similarities with that of Google’s site reliability engineers. In this episode, Emil argues that the academic study of emergency management and industries such as aerospace and transportation have a lot to teach software engineers about responding to production problems.  </p> <p>In this interview Emil argues that we need to move beyond tribal knowledge and incorporate practices such as an incident command system and rigorous use of checklists. Emil suggests that we need to move beyond a mindset of “move fast and break things” and toward a place of more deliberate preparation.</p>]]></content:encoded>
			<enclosure length="43201553" type="audio/mpeg" url="https://chtbl.com/track/7D91G/traffic.libsyn.com/secure/corecursive/002-Incident_Response.mp3?dest-id=628353" />
			<itunes:duration>51:26</itunes:duration>
			<itunes:explicit>clean</itunes:explicit>
			<itunes:keywords />
			<itunes:subtitle><![CDATA[As a system becomes more complex, the chance of failure increases. At a large enough scale, failures are inevitable. Incident response is the practice of preparing for and effectively recovering from these failures. An engineering team can use...]]></itunes:subtitle>
			<itunes:summary>In this interview Emil argues that we need to move beyond tribal knowledge and incorporate practices such as an incident command system and rigorous use of checklists. Emil suggests that we need to move beyond a mindset of “move fast and break things” and toward a place of more deliberate preparation.</itunes:summary>
			<itunes:episode>2</itunes:episode>
			<itunes:episodeType>full</itunes:episodeType>
			<itunes:author>Adam Gordon Bell</itunes:author>
		</item>
	</channel>
</rss>
